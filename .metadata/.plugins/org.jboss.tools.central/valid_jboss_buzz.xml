<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Valgrind Memcheck: Different ways to lose your memory</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BgTDqTxONTw/" /><category term="C" /><category term="Developer Tools" /><category term="Linux" /><category term="gcc" /><category term="Memory leaks" /><category term="Valgrind Memcheck" /><author><name>Mark Wielaard</name></author><id>https://developers.redhat.com/blog/?p=853717</id><updated>2021-04-23T07:00:44Z</updated><published>2021-04-23T07:00:44Z</published><content type="html">&lt;p&gt;Valgrind is an instrumentation framework for building dynamic analysis tools that check &lt;a target="_blank" rel="nofollow" href="/topics/c"&gt;C and C++ programs&lt;/a&gt; for errors. Memcheck is the default tool &lt;a target="_blank" rel="nofollow" href="https://valgrind.org/"&gt;Valgrind&lt;/a&gt; uses when you don&amp;#8217;t ask it for another tool. Other useful tools you can select (using &lt;code&gt;valgrind tool=&lt;em&gt;toolname&lt;/em&gt;&lt;/code&gt;) are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;cachegrind&lt;/code&gt; and &lt;code&gt;callgrind&lt;/code&gt;, to do cache and call-graph function profiling&lt;/li&gt; &lt;li&gt;&lt;code&gt;helgrind&lt;/code&gt; and &lt;code&gt;drd&lt;/code&gt;, to do thread error and data-race detection&lt;/li&gt; &lt;li&gt;&lt;code&gt;massif&lt;/code&gt; and &lt;code&gt;dhat&lt;/code&gt;, to do dynamic heap usage analysis&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Each of these tools deserves an article of its own, but here we will concentrate on Memcheck.&lt;/p&gt; &lt;h2&gt;Detecting memory leaks with Valgrind Memcheck&lt;/h2&gt; &lt;p&gt;Memcheck tracks all memory reads, writes, allocations, and deallocations in a C or C++ program. The tool can detect many different memory errors. For instance, it detects reads or writes before or after allocated memory blocks. It warns about the use of (partially) undefined values in conditional code or passing such values to system calls. It will also notify you about bad or double deallocation of memory blocks. But for now, we will discuss memory leak detection with Memcheck.&lt;/p&gt; &lt;h2&gt;Generating a leak summary&lt;/h2&gt; &lt;p&gt;When you run Valgrind on your program without any additional arguments, it produces a summary of the different kinds of leaks it has detected. For example, &lt;code&gt;valgrind ./myprog&lt;/code&gt; might produce the following summary:&lt;/p&gt; &lt;pre&gt; LEAK SUMMARY: definitely lost: 48 bytes in 1 blocks indirectly lost: 24 bytes in 3 blocks possibly lost: 0 bytes in 0 blocks still reachable: 14 bytes in 1 blocks suppressed: 0 bytes in 0 blocks &lt;/pre&gt; &lt;p&gt;Memcheck reports leaks in five categories: definitely lost, indirectly lost, possibly lost, still reachable, and suppressed. The first four categories indicate different kinds of memory blocks that weren&amp;#8217;t freed before the program ended. If you aren&amp;#8217;t interested in specific blocks, you can tell Valgrind not to report them (you&amp;#8217;ll see how shortly). The summary also shows you the number of bytes lost and how many blocks they are in, which tells you whether you are losing lots of small allocations, or a few large ones.&lt;/p&gt; &lt;p&gt;The following sections explain each category.&lt;/p&gt; &lt;h3&gt;Definitely lost&lt;/h3&gt; &lt;p&gt;The first category, definitely lost, is generally the most urgent kind of leak to track down, because there is no way to use or recover that memory. Let&amp;#8217;s look at an example of a small program that simply calls &lt;code&gt;output_report&lt;/code&gt; a couple of times. That function prints a small banner and a number each time. As we will see, the memory we reserve for the report banner will be definitely lost (multiple times) when the program finishes:&lt;/p&gt; &lt;pre&gt; #include &amp;#60;stdlib.h&amp;#62; #include &amp;#60;stdio.h&amp;#62; #include &amp;#60;string.h&amp;#62; char * create_banner () { const char *user = getenv ("USER"); size_t len = 1 + 2 * 4 + strlen (user) + 1; char *b = malloc (len); sprintf (b, "\t|** %s **|", user); return b; } void output_report (int nr) { char *banner = create_banner (); puts (banner); printf ("Number: %d\n", nr); printf ("\n"); } int main () { for (int i = 1; i &amp;#60;= 3; i++) output_report (i); return 0; } &lt;/pre&gt; &lt;p&gt;Compile this code with &lt;code&gt;gcc -Wall -g -o definitely definitely.c&lt;/code&gt; and run it under Valgrind, asking for details with &lt;code&gt;valgrind --leak-check=full ./definitely&lt;/code&gt;. Now, before the leak summary, Valgrind will show backtraces where the program allocated memory that was ultimately lost:&lt;/p&gt; &lt;pre&gt; 42 bytes in 3 blocks are definitely lost in loss record 1 of 1 at 0x4C29F33: malloc (vg_replace_malloc.c:309) by 0x4011C7: create_banner (definitely.c:10) by 0x401200: output_report (definitely.c:18) by 0x40124C: main (definitely.c:28) &lt;/pre&gt; &lt;p&gt;Note that Memcheck found three leaks, which it reports as one loss record because they have identical backtraces. By default, it requires the whole backtrace to be the same in order to consider leaks similar enough to report together. If you want Memcheck to combine more leaks, you can use &lt;code&gt;--leak-resolution=low&lt;/code&gt; or &lt;code&gt;--leak-resolution=med&lt;/code&gt; to group leaks that have only two or four backtrace entries in common. This is useful if Memcheck reports lots of leaks with slightly different backtraces that you suspect are probably the same issue. You can then concentrate on the record with the highest number of bytes (or blocks) lost.&lt;/p&gt; &lt;h3&gt;Still reachable&lt;/h3&gt; &lt;p&gt;In the previous example, it is clear we should free &lt;code&gt;banner&lt;/code&gt; after use. We could do that at the end of the &lt;code&gt;output_report&lt;/code&gt; function by adding &lt;code&gt;free (banner)&lt;/code&gt;. Then, when running under Valgrind again, it will happily say &lt;code&gt;All heap blocks were freed -- no leaks are possible&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;But we are clever and see that the code reuses the same banner for each report. So, we define &lt;code&gt;banner&lt;/code&gt; as a static top-level variable in our code and move the &lt;code&gt;create_banner&lt;/code&gt; call to the &lt;code&gt;main&lt;/code&gt; function, so that &lt;code&gt;create_banner&lt;/code&gt;is called only once:&lt;/p&gt; &lt;pre&gt;char *banner; void output_report (int nr) { puts (banner); printf ("Number: %d\n", nr); printf ("\n"); } int main { banner = create_banner (); for (int i = 1; i &amp;#60;= 3; i++) output_report (i); return 0; } &lt;/pre&gt; &lt;p&gt;Note how we again forget to call &lt;code&gt;free&lt;/code&gt;, this time at the end of &lt;code&gt;main&lt;/code&gt;. Now, when running under Valgrind, Memcheck will report &lt;code&gt;still reachable: 14 bytes in 1 blocks&lt;/code&gt; and zero bytes lost in any other category.&lt;/p&gt; &lt;p&gt;But the output offers no details of loss records with backtraces for memory blocks that are still reachable, even though we ran with &lt;code&gt;--leak-check=full&lt;/code&gt;. This is because Memcheck thinks the error is not very serious. The memory is still reachable, so the program could still be using it. In theory, you could free it at the end of the program, but all memory is freed at the end of the program anyway.&lt;/p&gt; &lt;p&gt;Although still reachable memory isn&amp;#8217;t a real issue in theory, you might still want to look into it. You might want to see whether you could free a given block earlier, which might lower memory usage for longer running programs. Or because you really like to see that statement&lt;code&gt;All heap blocks were freed -- no leaks are possible&lt;/code&gt;. To get the details you need, add &lt;code&gt;--show-leak-kinds=reachable&lt;/code&gt;Â or &lt;code&gt;--show-leak-kinds=all&lt;/code&gt; to the Valgrind command line (together with &lt;code&gt;--leak-check=full&lt;/code&gt;). Now you will also get backtraces showing where still reachable memory blocks were allocated in your program.&lt;/p&gt; &lt;h3&gt;Possibly lost&lt;/h3&gt; &lt;p&gt;To explore the other categories of leaks, we change our program a little to include some lists of numbers to report. Each report will have a different list of numbers to report. The complete data structure is allocated at the start of the program. And for each set of numbers, we allocate a new block of numbers. To keep things simple (too simple, as Memcheck will point out) we keep just one pointer to the current numbers struct to be printed. Although we create three sets of numbers, we output only two reports:&lt;/p&gt; &lt;pre&gt;#include &amp;#60;stdlib.h&amp;#62; #include &amp;#60;stdio.h&amp;#62; struct numbers { int n; int *nums; }; int n; struct numbers *numbers; void create_numbers (struct numbers **nrs, int *n) { *n = 3; *nrs = malloc ((sizeof (struct numbers) * 3)); struct numbers *nm = *nrs; for (int i = 0; i &amp;#60; 3; i++) { nm-&amp;#62;n = i + 1; nm-&amp;#62;nums = malloc (sizeof (int) * (i + 1)); for (int j = 0; j &amp;#60; i + 1; j++) nm-&amp;#62;nums[j] = i + j; nm++; } } void output_report () { puts ("numbers"); for (int i = 0; i &amp;#60; numbers-&amp;#62;n; i++) printf ("Number: %d\n", numbers-&amp;#62;nums[i]); printf ("\n"); } int main () { create_numbers (&amp;#38;numbers, &amp;#38;n); for (int i = 0; i &amp;#60; 2; i++) { output_report (); numbers++; } return 0; } &lt;/pre&gt; &lt;p&gt;When we compile this program with &lt;code&gt;gcc -Wall -g -o possibly possibly.c&lt;/code&gt; and then run it under Valgrind with &lt;code&gt;valgrind --leak-check=full ./possibly&lt;/code&gt;, ValgrindÂ reports &lt;code&gt;possibly lost: 72 bytes in 4 blocks&lt;/code&gt;. And because we ran with &lt;code&gt;--leak-check=full&lt;/code&gt;, it also reports the backtraces:&lt;/p&gt; &lt;pre&gt; 24 bytes in 3 blocks are possibly lost in loss record 1 of 2 at 0x4C29F33: malloc (vg_replace_malloc.c:309) by 0x4011C3: create_numbers (possibly.c:22) by 0x40128F: main (possibly.c:41) 48 bytes in 1 blocks are possibly lost in loss record 2 of 2 at 0x4C29F33: malloc (vg_replace_malloc.c:309) by 0x401185: create_numbers (possibly.c:17) by 0x40128F: main (possibly.c:41) &lt;/pre&gt; &lt;p&gt;Memcheck calls this memory &lt;em&gt;possibly lost&lt;/em&gt; because it can still see how to access the blocks of memory. The &lt;code&gt;numbers&lt;/code&gt; pointer points to the third block of numbers. If we kept some extra information, we could theoretically count backward to the beginning of this block of memory and access the rest of the information, or deallocate the whole block and the other memory it points to.&lt;/p&gt; &lt;p&gt;But Memcheck thinks this is most likely a mistake. And in our example, as in most such cases, Memcheck is right. When walking a data structure without keeping a reference to the structure itself, we can never reuse or free the structure. We should have used the &lt;code&gt;numbers&lt;/code&gt; pointer as a base and used an (array) index to pass the current record as &lt;code&gt;output_report (&amp;#38;numbers[i])&lt;/code&gt;. Then, Memcheck would have reported the data blocks as still reachable. (There is still a memory leak, but not a severe one, because there is a direct pointer to the memory and it could easily be freed.)&lt;/p&gt; &lt;h3&gt;Indirectly lost&lt;/h3&gt; &lt;p&gt;In the previous example Memcheck reported a possibly lost block because the &lt;code&gt;numbers&lt;/code&gt; pointer was still pointing inside an allocated block. We might be tempted to fix it by simply clearing the pointer after the &lt;code&gt;output_report&lt;/code&gt; calls by doing &lt;code&gt;numbers = NULL;&lt;/code&gt; to indicate that there is no current numbers list to report. But then we have also just lost the last pointer to our memory data blocks. We should have freed the memory first, but we can&amp;#8217;t do it now because we don&amp;#8217;t have a pointer to the start of the data structure anymore:&lt;/p&gt; &lt;pre&gt;int main () { create_numbers (&amp;#38;numbers, &amp;#38;n); for (int i = 0; i &amp;#60; 2; i++) { output_report (); numbers++; } numbers = NULL; return 0; } &lt;/pre&gt; &lt;p&gt;Now Memcheck will report the memory as definitely lost. And because the memory block contained pointers to other memory blocks, those blocks are reported as indirectly lost. If we run with &lt;code&gt;--leak-check=full&lt;/code&gt; we see a backtrace for the main numbers memory block:&lt;/p&gt; &lt;pre&gt; 72 (48 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2 at 0x4C29F33: malloc (vg_replace_malloc.c:309) by 0x401185: create_numbers (possibly.c:17) by 0x40128F: main (possibly.c:41) LEAK SUMMARY: definitely lost: 48 bytes in 1 blocks indirectly lost: 24 bytes in 3 blocks possibly lost: 0 bytes in 0 blocks still reachable: 0 bytes in 0 blocks suppressed: 0 bytes in 0 blocks &lt;/pre&gt; &lt;p&gt;Note how there are no backtraces for the indirectly lost blocks. This is because Memcheck believes you will probably fix that when you fix the definitely lost block. If you do free the definitely lost block, but not the blocks of memory that were indirectly pointed to, next time you run your partially fixed program under Valgrind, Memcheck will report those indirectly lost blocks as definitely lost (and now with a backtrace). So by iteratively fixing the definitely lost memory leaks, you will eventually fix all indirectly lost memory leaks.&lt;/p&gt; &lt;p&gt;If you cannot immediately find the definitely lost block that caused some indirectly lost blocks, it might be informative to see the backtraces for where the indirectly lost blocks were created. When using &lt;code&gt;--leak-check=full&lt;/code&gt; you can do that by adding &lt;code&gt;--show-leak-kinds=reachable&lt;/code&gt;Â or &lt;code&gt;--show-leak-kinds=all&lt;/code&gt; to the &lt;code&gt;valgrind&lt;/code&gt; command line.&lt;/p&gt; &lt;h3&gt;Suppressed&lt;/h3&gt; &lt;p&gt;By default, Memcheck counts definitely lost and possibly lost blocks as errors with &lt;code&gt;--leak-check=full&lt;/code&gt;. It will also show where those blocks were allocated. It doesn&amp;#8217;t regard indirectly lost blocks or still reachable lost blocks as errors by default. And it won&amp;#8217;t show backtraces for where those still reachable or indirectly lost blocks were allocated, unless explicitly asked toÂ  do so with &lt;code&gt;--show-leak-kinds=all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Indirectly lost blocks will disappear (or turn into definitely lost blocks) when you resolve the definitely lost issues. Without definitely lost blocks, there can be no indirectly lost blocks. For reachable blocks, it might still make sense to see whether you can deallocate them early, in order to lower memory usage of your program. Or explicitly free them at the end of your program to make sure all memory is really accounted for and cleaned up.&lt;/p&gt; &lt;p&gt;But there might be reasons for not fixing all memory leaks. They might occur in a library you are using that cannot easily be replaced. Or you might be convinced that a possibly lost block isn&amp;#8217;t really an error. If, in the original definitely lost example, you decide not to fix the issue and to keep the memory leak, you might want to generate a suppression so Memcheck won&amp;#8217;t complain about this particular block again. You can do this easily by running &lt;code&gt;valgrind --leak-check=full --gen-suppressions=all ./definitely&lt;/code&gt; which generates an example suppression:&lt;/p&gt; &lt;pre&gt;{ &lt;em&gt;insert_a_suppression_name_here&lt;/em&gt; Memcheck:Leak match-leak-kinds: definite fun:malloc fun:create_banner fun:output_report fun:main } &lt;/pre&gt; &lt;p&gt;You can put that into a file (say, &lt;code&gt;local.supp&lt;/code&gt;), replacing &lt;code&gt;&lt;em&gt;insert_a_suppression_name_here&lt;/em&gt;&lt;/code&gt; with something descriptive such as &lt;code&gt;small leak in create_banner&lt;/code&gt;. Now, when you run &lt;code&gt;valgrind --suppressions=./local.supp --leak-check=full ./definitely&lt;/code&gt;, the leak will be suppressed:&lt;/p&gt; &lt;pre&gt; LEAK SUMMARY: definitely lost: 0 bytes in 0 blocks indirectly lost: 0 bytes in 0 blocks possibly lost: 0 bytes in 0 blocks still reachable: 0 bytes in 0 blocks suppressed: 42 bytes in 3 blocks &lt;/pre&gt; &lt;p&gt;There won&amp;#8217;t be any more output for any of the suppressed blocks. But if you want to see which suppressions were used, you can add &lt;code&gt;--show-error-list=yes&lt;/code&gt; (or &lt;code&gt;-s&lt;/code&gt;) to the &lt;code&gt;valgrind&lt;/code&gt; command line. That option makes Valgrind show the suppression name, suppression file, line number, and how many bytes and blocks were suppressed by that suppression rule:&lt;/p&gt; &lt;pre&gt;used_suppression: 1 small leak in create_banner ./local.supp:2 suppressed: 42 bytes in 3 blocks &lt;/pre&gt; &lt;h2&gt;Test suite integration&lt;/h2&gt; &lt;p&gt;When you have resolved all memory leak issues, or when you have suppressions for those you don&amp;#8217;t care about, you might want to integrate Valgrind into your test suite to catch any new memory leaks early. If you use &lt;code&gt;--error-exitcode=&amp;#60;number&amp;#62;&lt;/code&gt;, Valgrind will change the program&amp;#8217;s exit code to the given number when an error (memory leak) is detected. You can also use &lt;code&gt;--quiet&lt;/code&gt; (or &lt;code&gt;-q&lt;/code&gt;) to make Valgrind silent, so that it doesn&amp;#8217;t interfere with the normal &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; of the program, except for error output, so that you can compare the program output as usual.&lt;/p&gt; &lt;p&gt;Remember that by default Memcheck regards only definitely lost and possibly lost memory blocks as errors. You can change that by using &lt;code&gt;--errors-for-leak-kinds=&lt;em&gt;set&lt;/em&gt;&lt;/code&gt;. If you are interested in getting an error only for definitely lost blocks, you can use &lt;code&gt;--errors-for-leak-kinds=definite&lt;/code&gt;. When your test programs always free all memory blocks, including still reachable blocks, you can use &lt;code&gt;--errors-for-leak-kinds=definite,possibly,reachable&lt;/code&gt; or &lt;code&gt;--errors-for-leak-kinds=all&lt;/code&gt;. Note that &lt;code&gt;--errors-for-leak-kinds=&lt;em&gt;set&lt;/em&gt;&lt;/code&gt;, which works together with &lt;code&gt;--error-exitcode=&lt;em&gt;number&lt;/em&gt;&lt;/code&gt;Â and the above mentioned &lt;code&gt;--show-leak-kinds=&lt;em&gt;set&lt;/em&gt;&lt;/code&gt; option, which determines which backtraces to show, are independent. But in general you will want them to be the same, so that you will always get a backtrace for a memory error.&lt;/p&gt; &lt;p&gt;So, a good way to run your tests is &lt;code&gt;valgrind -q --error-exitcode=99 --leak-check=full ./testprog&lt;/code&gt;. If you have any local suppressions, you can add &lt;code&gt;--suppressions=local.supp&lt;/code&gt;. And if you really want all your test cases to be totally free from any kind of memory leak, add &lt;code&gt;--show-leak-kinds=all --errors-for-leak-kinds=all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#38;linkname=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fvalgrind-memcheck-different-ways-to-lose-your-memory%2F&amp;#038;title=Valgrind%20Memcheck%3A%20Different%20ways%20to%20lose%20your%20memory" data-a2a-url="https://developers.redhat.com/blog/2021/04/23/valgrind-memcheck-different-ways-to-lose-your-memory/" data-a2a-title="Valgrind Memcheck: Different ways to lose your memory"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/23/valgrind-memcheck-different-ways-to-lose-your-memory/"&gt;Valgrind Memcheck: Different ways to lose your memory&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BgTDqTxONTw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Valgrind is an instrumentation framework for building dynamic analysis tools that check C and C++ programs for errors. Memcheck is the default tool Valgrind uses when you don&amp;#8217;t ask it for another tool. Other useful tools you can select (using valgrind tool=toolname) are: cachegrind and callgrind, to do cache and call-graph function profiling helgrind and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/23/valgrind-memcheck-different-ways-to-lose-your-memory/"&gt;Valgrind Memcheck: Different ways to lose your memory&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/23/valgrind-memcheck-different-ways-to-lose-your-memory/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">853717</post-id><dc:creator>Mark Wielaard</dc:creator><dc:date>2021-04-23T07:00:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/23/valgrind-memcheck-different-ways-to-lose-your-memory/</feedburner:origLink></entry><entry><title>Integrate Red Hat Data Grid and Red Hatâs single sign-on technology on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/flrso8nobSQ/" /><category term="Big Data" /><category term="Kubernetes" /><category term="Security" /><category term="Data Grid" /><category term="openshift" /><category term="single sign-on" /><category term="SSO" /><author><name>Varsha Sharma</name></author><id>https://developers.redhat.com/blog/?p=875407</id><updated>2021-04-23T07:00:21Z</updated><published>2021-04-23T07:00:21Z</published><content type="html">&lt;p&gt;Using &lt;a target="_blank" rel="nofollow" href="/products/datagrid/overview"&gt;Red Hat Data Grid&lt;/a&gt; as an external cache for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; makes it possible for Data Grid to store data independent of the application layer. This way, Data Grid provides application elasticity, failover across data centers, and a reduced memory footprint.&lt;/p&gt; &lt;p&gt;The most common use case for this combination is &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/server_installation_and_configuration_guide/index#crossdc-mode"&gt;cross-datacenter replication mode&lt;/a&gt;, where Red Hat&amp;#8217;s single sign-on (SSO) technology uses Data Grid to replicate data between data centers.&lt;/p&gt; &lt;p&gt;To back up data across sites in an &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/welcome-to-the-world-of-xpaas"&gt;xPaaS environment&lt;/a&gt; such as &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, the recommended approach is to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html-single/running_data_grid_on_openshift/index#backup_sites"&gt;deploy Data Grid using the Data Grid Operator&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This article offers quick instructions for getting Red Hat Data Grid 8.1.1 working with Red Hat&amp;#8217;s single sign-on technology version 7.4.5. The article does not use a full cross-datacenter setup; just a Data Grid server and an SSO client running on OpenShift. We will use the Hot Rod protocol for communication, with both authentication and Secure Sockets Layer (SSL) enabled.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Data Grid can be used as an external cache container for application-specific data. As an external cache, it allows the data layer to scale independently of the application. It also allows different clusters, which may reside in various domains, to access data from the same Data Grid cluster.&lt;/p&gt; &lt;h2&gt;Setting up the environment&lt;/h2&gt; &lt;p&gt;The integration described in this article requires the following technologies:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;oc&lt;/code&gt; client on a laptop&lt;/li&gt; &lt;li&gt;Red Hat&amp;#8217;s single sign-on technology 7.4.5&lt;/li&gt; &lt;li&gt;Data Grid 8.1.1&lt;/li&gt; &lt;li&gt;OpenShift 4.6.x&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create a project for the integration, run:&lt;/p&gt; &lt;pre&gt;$ oc new-project &lt;em&gt;project_name&lt;/em&gt; &lt;/pre&gt; &lt;h2&gt;Setting up Data Grid&lt;/h2&gt; &lt;p&gt;Install Data Grid 8.1.1 using the Data Grid Operator (see &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html/running_data_grid_on_openshift/installation#create_olm_subscription"&gt;&lt;em&gt;Installing Data Grid Operator on Red Hat OpenShift&lt;/em&gt;&lt;/a&gt; for instructions).&lt;/p&gt; &lt;pre&gt;NAMEÂ  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  READY Â  STATUSÂ  Â  RESTARTS Â  AGE infinispan-operator-88d585dd7-xc5xh Â  1/1 Â  Â  Running Â  0Â  Â  Â  Â  Â  58s &lt;/pre&gt; &lt;p&gt;Create an Infinispan custom resource (CR) for the cluster and a cache CR for each of the caches you need.&lt;/p&gt; &lt;p&gt;An Operator makes it easy to deploy Data Grid in a variety of configurations. Once youâve deployed the Operator from the OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/understanding/olm-understanding-operatorhub.html"&gt;OperatorHub&lt;/a&gt;, it exposes custom resources (called Infinispan cluster and Infinispan cache), which Data Grid uses to provision the caches on an existing cluster.&lt;/p&gt; &lt;p&gt;To use custom cache definitions along with Data Grid capabilities, such as cross-site replication, we create clusters of Data Grid service nodes. These nodes create an Infinispan cluster using Data Grid as a service.&lt;/p&gt; &lt;p&gt;First, create an Infinispan cluster from the OpenShift console by going to &lt;b&gt;Installed Operatorsâ&amp;#62;Infinispan Clusterâ&amp;#62;Create&lt;/b&gt;. Then, select the &lt;strong&gt;DataGrid&lt;/strong&gt; service type under the &lt;b&gt;Service&lt;/b&gt; field. Figure 1 shows these selections.&lt;/p&gt; &lt;div id="attachment_876187" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-10-52-29-e1614749206488.png"&gt;&lt;img aria-describedby="caption-attachment-876187" class="wp-image-876187 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-10-52-29-e1614749206488-1024x419.png" alt="The OpenShift console dialog to create an Infinispan cluster using Data Grid as a service." width="640" height="262" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-10-52-29-e1614749206488-1024x419.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-10-52-29-e1614749206488-300x123.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-10-52-29-e1614749206488-768x315.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-876187" class="wp-caption-text"&gt;Figure 1: Create an Infinispan cluster using Data Grid as a service.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The Infinispan CR will look like this:&lt;/p&gt; &lt;pre&gt;$ oc get infinispan NAME AGE rhsso-infinispan 53s &lt;/pre&gt; &lt;p&gt;You can get the status of pods as follows:&lt;/p&gt; &lt;pre&gt;$ oc get pods NAMEÂ  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  READY STATUS RESTARTS AGE infinispan-operator-88d585dd7-xc5xh 1/1Â  Â  Â RunningÂ  Â  Â  Â  0Â  Â  Â  Â  Â  Â  6m43s rhsso-infinispan-0Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1/1Â  Â  Â RunningÂ  Â  Â  Â  0Â  Â  Â  Â  Â  Â  100s rhsso-infinispan-1Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1/1Â  Â  Â RunningÂ  Â  Â  Â  0Â  Â  Â  Â  Â  Â  29s &lt;/pre&gt; &lt;h3&gt;Create a basic-auth secret for authentication&lt;/h3&gt; &lt;p&gt;The Data Grid Operator must authenticate with Data Grid service clusters to create caches. We will add credentials to a &lt;code&gt;basic-auth&lt;/code&gt; secret so the Data Grid Operator can access the Infinispan cluster when creating caches.&lt;/p&gt; &lt;p&gt;You can create a &lt;code&gt;basic-auth&lt;/code&gt; key/value secret by filling out the details in a form from the OpenShift console. Alternatively, you can create a YAML file as described in &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html-single/running_data_grid_on_openshift/index#cache_auth-caches"&gt;&lt;em&gt;11.5.1. Adding Credentials to Create Caches&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To retrieve the developer credentials from the Operator generated by the secret, run:&lt;/p&gt; &lt;pre&gt;oc get secret rhsso-infinispan-generated-secret \ -o jsonpath="{.data.identities\.yaml}" | base64 --decode &lt;/pre&gt; &lt;p&gt;Figure 2 shows the dialog to create the key/value secret.&lt;/p&gt; &lt;div id="attachment_878857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/03/secret.png"&gt;&lt;img aria-describedby="caption-attachment-878857" class="wp-image-878857" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/secret-300x209.png" alt="Create a key/value secret in the OpenShift console." width="640" height="447" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/secret-300x209.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/secret-768x536.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/secret.png 971w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-878857" class="wp-caption-text"&gt;Figure 2: Create a key/value secret.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create the Infinispan caches&lt;/h3&gt; &lt;p&gt;Using the Operator, &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html/running_data_grid_on_openshift/caches#cache_xml-caches"&gt;create a cache&lt;/a&gt; CR for each of the caches you need. You can use the following CR to create the work cache. Likewise, create other caches such as &lt;code&gt;sessions&lt;/code&gt;, &lt;code&gt;authenticationSessions&lt;/code&gt;, &lt;code&gt;offlineSessions&lt;/code&gt;, &lt;code&gt;clientSessions&lt;/code&gt;, &lt;code&gt;offlineClientSessions&lt;/code&gt;, &lt;code&gt;loginFailures&lt;/code&gt;, and &lt;code&gt;actionTokens&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;apiVersion: infinispan.org/v2alpha1 kind: Cache metadata: name: work namespace: rhsso744dg81 spec: adminAuth: secretName: basic-auth clusterName: eap-infinispan name: work template: &amp;#62;- &amp;#60;infinispan&amp;#62;&amp;#60;cache-container&amp;#62;&amp;#60;replicated-cache name="work" mode="SYNC" start="EAGER"&amp;#62;&amp;#60;transaction mode="NONE" locking="PESSIMISTIC"/&amp;#62;&amp;#60;locking acquire-timeout="0" /&amp;#62;&amp;#60;/replicated-cache&amp;#62;&amp;#60;/cache-container&amp;#62;&amp;#60;/infinispan&amp;#62; &lt;/pre&gt; &lt;p&gt;When you are finished, the cache status should look like what is shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_878867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/03/cache-e1614999552205.png"&gt;&lt;img aria-describedby="caption-attachment-878867" class="wp-image-878867" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/cache-e1614999552205-300x116.png" alt="A list of Infinispan caches in the Data Grid Operator." width="640" height="247" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/cache-e1614999552205-300x116.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/cache-e1614999552205-768x297.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/cache-e1614999552205.png 1009w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-878867" class="wp-caption-text"&gt;Figure 3: Infinispan caches in the Data Grid Operator.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create the route&lt;/h3&gt; &lt;p&gt;Next, create a route for accessing the Data Grid console, as shown in Figure 4.&lt;/p&gt; &lt;p&gt;Fill in the hostname in the format:&lt;/p&gt; &lt;pre&gt;&lt;i&gt;NAME_OF_THE_ROUTE&lt;/i&gt;-&lt;i&gt;PROJECT_NAME&lt;/i&gt;.apps.cndcluster9.ocp.gsslab.pnq2.redhat.com&lt;/pre&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;dg-rhsso744dg81.apps.cndcluster9.ocp.gsslab.pnq2.redhat.com&lt;/pre&gt; &lt;div id="attachment_878877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/03/route.png"&gt;&lt;img aria-describedby="caption-attachment-878877" class="wp-image-878877" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/route-300x193.png" alt="The dialog to create the route." width="640" height="412" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/route-300x193.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/route-768x494.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/route.png 1018w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-878877" class="wp-caption-text"&gt;Figure 4: Create the route for the Data Grid console.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Set up the Hot Rod connection&lt;/h3&gt; &lt;p&gt;Finally, retrieve the &lt;code&gt;tls.crt&lt;/code&gt; file from &lt;code&gt;rhsso-infinispan-cert-secret&lt;/code&gt; (the secret generated by the Data Grid Operator) to use it for the Hot Rod connection:&lt;/p&gt; &lt;pre&gt;$ oc get secret rhsso-infinispan-cert-secret \ &amp;#62; -o jsonpath='{.data.tls\.crt}' | base64 --decode &amp;#62; tls.crt &lt;/pre&gt; &lt;h2&gt;Setting up the SSO client&lt;/h2&gt; &lt;p&gt;To set up single sign-on using the directions in this section, refer to the documentation for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/red_hat_single_sign-on_for_openshift_on_openjdk/index#Configuring-Keystores"&gt;configuring keystores&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html-single/red_hat_single_sign-on_for_openshift_on_openjdk/index#Configuring-Secrets"&gt;configuring secrets&lt;/a&gt; for an SSO server. The tasks required are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create the HTTPS keystore.&lt;/li&gt; &lt;li&gt;Generate a secure key for the JGroups keystore.&lt;/li&gt; &lt;li&gt;Create and link secrets.&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Create the HTTPS keystore&lt;/h3&gt; &lt;p&gt;Enter the following commands to generate a CA certificate. Provide an identical password when signing the certificate-sign request with the CA certificate below:&lt;/p&gt; &lt;pre&gt;$ openssl req -new -newkey rsa:4096 -x509 -keyout xpaas.key -out xpaas.crt -days 365 -subj "/CN=xpaas-sso-demo.ca" Generating a 4096 bit RSA private key ............................................................................................................................................................................................................................++ .....................................................................................................++ writing new private key to 'xpaas.key' Enter PEM pass phrase: Verifying - Enter PEM pass phrase: &lt;/pre&gt; &lt;p&gt;Next, generate a CA certificate for the HTTPS keystore. Provide a password for the keystore:&lt;/p&gt; &lt;pre&gt;$ keytool -genkeypair -keyalg RSA -keysize 2048 -dname "CN=secure-sso-sso-app-demo.openshift.example.com" -alias jboss -keystore keystore.jks Enter keystore password: Re-enter new password: Enter key password for &amp;#60;jboss&amp;#62; (RETURN if same as keystore password): &lt;/pre&gt; &lt;p&gt;Enter the following commands to generate a certificate-sign request for the HTTPS keystore:&lt;/p&gt; &lt;pre&gt;$ keytool -certreq -keyalg rsa -alias jboss -keystore keystore.jks -file sso.csr Enter keystore password: #list the Generated files: $ ls tls.crt xpaas.key xpaas.crt keystore.jks sso.csr &lt;/pre&gt; &lt;p&gt;Sign the certificate-sign request with the CA certificate. Provide the same password that you used to generate the CA certificate:&lt;/p&gt; &lt;pre&gt;$ openssl x509 -req -CA xpaas.crt -CAkey xpaas.key -in sso.csr -out sso.crt -days 365 -CAcreateserial Signature ok subject=/CN=secure-sso-sso-app-demo.openshift.example.com Getting CA Private Key Enter pass phrase for xpaas.key: &lt;/pre&gt; &lt;p&gt;Import the CA certificate into the HTTPS keystore, using the same keystore password as above. Reply &lt;code&gt;yes&lt;/code&gt;Â toÂ &lt;code&gt;Trust this certificate? [no]:&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; $ keytool -import -file xpaas.crt -alias xpaas.ca -keystore keystore.jks Enter keystore password: Trust this certificate? [no]: yes&lt;/pre&gt; &lt;p&gt;Import the signed certificate-sign request into the HTTPS keystore with same keystore password:&lt;/p&gt; &lt;pre&gt;$ keytool -import -file sso.crt -alias jboss -keystore keystore.jks Enter keystore password: Certificate reply was installed in keystore &lt;/pre&gt; &lt;h3&gt;Generate a secure key for the JGroups keystore&lt;/h3&gt; &lt;p&gt;Enter the following commands to provide the keystore password:&lt;/p&gt; &lt;pre&gt;$ keytool -genseckey -alias secret-key -storetype JCEKS -keystore jgroups.jceks Enter keystore password: Re-enter new password: Enter key password for &amp;#60;secret-key&amp;#62; (RETURN if same as keystore password):&lt;/pre&gt; &lt;p&gt;Import the CA certificate into a new SSO server truststore and provide the truststore password. Reply &lt;code&gt;yes&lt;/code&gt; to the &lt;code&gt;Trust this certificate? [no]:&lt;/code&gt; question:&lt;/p&gt; &lt;pre&gt;$ keytool -import -file xpaas.crt -alias xpaas.ca -keystore truststore.jks Enter keystore password: Re-enter new password: Trust this certificate? [no]: yes &lt;/pre&gt; &lt;h3&gt;Create and link a secret&lt;/h3&gt; &lt;p&gt;Enter the following commands to create the secrets for the HTTPS and JGroups keystores, and SSO server truststore, generated in the previous section:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic sso-app-secret --from-file=keystore.jks --from-file=jgroups.jceks --from-file=truststore.jks secret/sso-app-secret created&lt;/pre&gt; &lt;p&gt;Link these secrets to the default service account, which is used to run SSO pods:&lt;/p&gt; &lt;pre&gt;$ oc secrets link default sso-app-secret &lt;/pre&gt; &lt;p&gt;Verify the secret is linked to the service account:&lt;/p&gt; &lt;pre&gt;$ oc describe serviceaccounts default Name: default Namespace: rhsso744dg81 Labels: &amp;#60;none&amp;#62; Annotations: &amp;#60;none&amp;#62; Image pull secrets: default-dockercfg-gnvw9 Mountable secrets: default-token-pjmzp default-dockercfg-gnvw9 sso-app-secret Tokens: default-token-k4k6m default-token-pjmzp Events: &amp;#60;none&amp;#62; &lt;/pre&gt; &lt;h2&gt;Deploying the SSO image&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll use the application template to deploy the single sign-on image. The steps are as follows:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Clone the templates from GitHub: &lt;pre&gt;$ git clone https://github.com/jboss-container-images/redhat-sso-7-openshift-image&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Change to the templates directory: &lt;pre&gt;$ cd redhat-sso-7-openshift-image/templates&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Deploy the application with the template using the proper parameters: &lt;pre&gt;$ oc new-app --template=sso74-https -p HTTPS_SECRET="sso-app-secret" -p HTTPS_KEYSTORE="keystore.jks" -p HTTPS_NAME="jboss" -p HTTPS_PASSWORD="redhat" -p JGROUPS_ENCRYPT_SECRET="sso-app-secret" -p JGROUPS_ENCRYPT_KEYSTORE="jgroups.jceks" -p JGROUPS_ENCRYPT_NAME="secret-key" -p JGROUPS_ENCRYPT_PASSWORD="redhat" -p SSO_TRUSTSTORE="truststore.jks" -p SSO_TRUSTSTORE_PASSWORD="redhat" -p SSO_TRUSTSTORE_SECRET="sso-app-secret"&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Go to the directory from which you retrieved the &lt;code&gt;tls.crt&lt;/code&gt; file from &lt;code&gt;rhsso-infinispan-cert-secret&lt;/code&gt; (the secret generated by the Operator) while setting up Data Grid. This certificate will be used for the Hot Rod connection: &lt;pre&gt;$ keytool -importcert -file tls.crt -keystore truststore.jks&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Create a secret with the truststore file, and add the volume and volume mount entries on the deployment configuration: &lt;pre&gt;$ oc create secret generic truststore-secret --from-file=truststore.jks secret/truststore-secret created $ oc set volume dc/sso --add --name=truststore-secret -m /etc/truststore -t secret --secret-name=truststore-secret --default-mode='0755' &lt;/pre&gt; &lt;p&gt;Alternatively, you can navigate on the web console to the secret, click &lt;strong&gt;add secret to workload&lt;/strong&gt;, and fill in the form. After adding the secret as a volume and specifying the path (&lt;code&gt;/etc/truststore&lt;/code&gt;), you will be able to use &lt;code&gt;/etc/truststore/truststore.jks&lt;/code&gt; as the truststore. Figure 5 shows the option to add a secret to the workload.&lt;/p&gt; &lt;p&gt;&lt;div id="attachment_879047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/03/trust.png"&gt;&lt;img aria-describedby="caption-attachment-879047" class="wp-image-879047 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/trust-1024x460.png" alt="Add a secret to the workload in the OpenShift console." width="640" height="288" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/trust-1024x460.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/trust-300x135.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/trust-768x345.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/trust.png 1211w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-879047" class="wp-caption-text"&gt;Figure 5: Add a secret to the workload.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;Verify the volume: &lt;pre&gt;$ oc get dc NAME REVISION DESIRED CURRENT TRIGGERED BY sso 2 1 1 config,image(sso74-openshift-rhel8:7.4) $ oc set volume dc/sso --all sso secret/sso-app-secret as eap-keystore-volume mounted at /etc/eap-secret-volume secret/sso-app-secret as eap-jgroups-keystore-volume mounted at /etc/jgroups-encrypt-secret-volume secret/sso-app-secret as sso-truststore-volume mounted at /etc/sso-secret-volume secret/truststore-secret as truststore-secret mounted at /etc/truststore &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;To make configuration changes to single sign-on using the command-line interface, create a file named &lt;code&gt;sso-extensions.cli&lt;/code&gt;Â with the following content: &lt;pre&gt;embed-server --std-out=echo --server-config=standalone-openshift.xml batch /system-property=javax.net.debug:add(value="ssl,handshake") /subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan) /socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=remote-cache/:add(host=rhsso-infinispan.rhsso.svc.cluster.local,port=${remote.cache.port:11222},fixed-source-port=true) run-batch batch /subsystem=infinispan/cache-container=keycloak/replicated-cache=work/store=remote:add(cache=work,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,remoteStoreSecurityEnabled=true,statistics=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) /subsystem=infinispan/cache-container=keycloak/distributed-cache=sessions/store=remote:add(cache=sessions,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineSessions/store=remote:add(cache=offlineSessions,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) /subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/store=remote:add(cache=clientSessions,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/store=remote:add(cache=offlineClientSessions,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) /subsystem=infinispan/cache-container=keycloak/distributed-cache=loginFailures/store=remote:add(cache=loginFailures,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/store=remote:add(cache=actionTokens,remote-servers=[remote-cache],fetch-state=false,passivation=false,preload=false,purge=false,shared=true,properties={rawValues=true,marshaller=org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory,infinispan.client.hotrod.trust_store_file_name=/etc/truststore/truststore.jks,infinispan.client.hotrod.trust_store_password=redhat,infinispan.client.hotrod.sasl_mechanism=DIGEST-MD5,infinispan.client.hotrod.auth_username=developer,infinispan.client.hotrod.auth_password=JkSURXkBfLqsRG6M,infinispan.client.hotrod.use_ssl=true,remoteStoreSecurityEnabled=true,statistics=true,infinispan.client.hotrod.auth_realm=default,infinispan.client.hotrod.auth_server_name=infinispan}) run-batch reload quit &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Use this &lt;code&gt;sso-extensions.cli&lt;/code&gt; file to create a config map and mount it as a volume: &lt;pre&gt;$ oc create configmap jboss-cli --from-file=sso-extensions.cli $ oc set volume dc/sso --add --name=jboss-cli -m /opt/eap/extensions -t configmap --configmap-name=jboss-cli --default-mode='0755' --overwrite &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Â Define a site name in the deployment config using &lt;code&gt;JAVA_OPTS&lt;/code&gt;: &lt;pre&gt;$ oc set env dc/sso \ -e "JAVA_OPTS_APPEND= \ -Djboss.site.name=site1" &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;To log in to the SSO console, create a user: &lt;pre&gt;sh-4.4$ ./add-user-keycloak.sh \ &amp;#62; -r master \ &amp;#62; -u admin \ &amp;#62; -p password sh-4.4$ ./jboss-cli.sh --connect ':reload' &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Verifying the integration&lt;/h2&gt; &lt;p&gt;The last step is to verify the integration. First, you will log in to the OpenShift project, then you will open a shell in the SSO pod.&lt;/p&gt; &lt;h3&gt;Log in to the OpenShift project&lt;/h3&gt; &lt;p&gt;Run &lt;code&gt;oc get pods -o wide&lt;/code&gt; to grab the SSO pod&amp;#8217;s IP address.&lt;/p&gt; &lt;h3&gt;Open a shell in the SSO pod&lt;/h3&gt; &lt;p&gt;Take the following steps to open a shell in the SSO pod.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Use a remote shell as follows: &lt;pre&gt;$ oc rsh sso-49-scgz2 &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Change to the &lt;code&gt;opt/eap/bin/&lt;/code&gt; folder: &lt;pre&gt;$ cd opt/eap/bin/&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Open the Data Grid console and navigate to the &lt;code&gt;clientSessions&lt;/code&gt; cache.&lt;/li&gt; &lt;li&gt;Invoke the single sign-on CLI and create a connection: &lt;pre&gt;$ ./kcadm.sh config credentials --server http://10.129.2.250:8080/auth --realm master --user admin --password password &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Refresh the Data Grid console and observe that the number of entries in the &lt;code&gt;clientSessions&lt;/code&gt; cache is incremented with each invocation of the SSO command-line interface, as shown in Figure 6. &lt;p&gt;&lt;div id="attachment_879067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/03/verify.png"&gt;&lt;img aria-describedby="caption-attachment-879067" class="wp-image-879067 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/verify-1024x471.png" alt="Data Grid Console with the clientSessions cache entries incremented with the invocation of the SSO CLI." width="640" height="294" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/verify-1024x471.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/verify-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/verify-768x353.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/verify.png 1251w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-879067" class="wp-caption-text"&gt;Figure 6: Data Grid Console with the &lt;code&gt;clientSessions&lt;/code&gt; cache entries incremented.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Note that cache entries are also incremented in case any users are added on the SSO end. If the SSO pod is recreated there is no loss of data and cache entries are retained on Data Grid.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Red Hat Data Grid is a valuable solution for large data sets across cloud platforms. Data Grid delivers many features for hybrid cloud deployments on OpenShift. In this article, youâve seen how to connect a single-sign on technology client with a Data Grid server as a remote store, and then deploy them on Red Hat OpenShift.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#38;linkname=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fintegrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift%2F&amp;#038;title=Integrate%20Red%20Hat%20Data%20Grid%20and%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2021/04/23/integrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift/" data-a2a-title="Integrate Red Hat Data Grid and Red Hatâs single sign-on technology on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/23/integrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift/"&gt;Integrate Red Hat Data Grid and Red Hat&amp;#8217;s single sign-on technology on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/flrso8nobSQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Using Red Hat Data Grid as an external cache for Red Hat&amp;#8217;s single sign-on technology makes it possible for Data Grid to store data independent of the application layer. This way, Data Grid provides application elasticity, failover across data centers, and a reduced memory footprint. The most common use case for this combination is cross-datacenter [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/23/integrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift/"&gt;Integrate Red Hat Data Grid and Red Hat&amp;#8217;s single sign-on technology on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/23/integrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">875407</post-id><dc:creator>Varsha Sharma</dc:creator><dc:date>2021-04-23T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/23/integrate-red-hat-data-grid-and-red-hats-single-sign-on-technology-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Solving the mystery of hanging character set conversions in glibcâs iconv utility</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/092iyWe5tDM/" /><category term="C" /><category term="Linux" /><category term="Open source" /><category term="Character encoding" /><category term="glibc" /><category term="iconv" /><category term="iconv option parsing" /><author><name>Arjun Shankar</name></author><id>https://developers.redhat.com/blog/?p=809287</id><updated>2021-04-23T07:00:09Z</updated><published>2021-04-23T07:00:09Z</published><content type="html">&lt;p&gt;Website visitors don&amp;#8217;t typically consider character encoding and conversion when accessing digital content. However, engineers have been dealing with conversion issues since &lt;a target="_blank" rel="nofollow" href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"&gt;users started transferring strings from one computer to another&lt;/a&gt;. Today, when more than 95 percent of all web pages use &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc3629"&gt;UTF-8&lt;/a&gt;, converting data between character sets might seem less relevant. However, it continues to be useful when dealing with legacy data and systems, or with languages where multiple character sets are comparably popular.&lt;/p&gt; &lt;p&gt;For example, using EUC-KR is not unusual on Korean websites because it is more efficient for Korean text. A search engine that indexes Korean sites needs to be able to convert between EUC-KR and UTF-8 to perform the relevant string comparisons.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;iconv&lt;/code&gt; programming interface provided by POSIX, implemented by its namesake utility program, converts textual data from one character encoding to another. As an engineer on the Red Hat Platform Tools team, I was tasked with finding and fixing bugs reported in the GNU C Library (glibc) &lt;code&gt;iconv&lt;/code&gt; utility. In this article, I discuss my experiences with fuzzing &lt;code&gt;iconv&lt;/code&gt; and fixing bugs in the &lt;code&gt;iconv&lt;/code&gt; front end.&lt;/p&gt; &lt;h2&gt;Error handling in iconv&lt;/h2&gt; &lt;p&gt;A typical &lt;code&gt;iconv&lt;/code&gt; program invocation looks like so:&lt;/p&gt; &lt;pre&gt;$ iconv -f ISO-8859-7 -t UTF-8&lt;/pre&gt; &lt;p&gt;In this case, it is expected to read Latin and Greek text (encoded as ISO/IEC 8859-7) from standard input and write its UTF-8 equivalent to standard output.&lt;/p&gt; &lt;p&gt;While POSIX allows the &lt;code&gt;iconv&lt;/code&gt; utility to exit with an error when given invalid input, the glibc &lt;code&gt;iconv&lt;/code&gt; implementation has an extension that is more tolerant of erroneous input. The user can add a suffix to the destination character set specification to enable &lt;code&gt;iconv&lt;/code&gt; features that can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Ignore invalid input characters while continuing to process further input.&lt;/li&gt; &lt;li&gt;Transliterate input characters without an equivalent in the output character set to a sufficiently similar combination of output characters.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, if we wanted to convert UTF-8 encoded Czech text, which uses both diacritics and standard Latin letters, to ASCII, the following invocation would do the trick:&lt;/p&gt; &lt;pre&gt;$ iconv -f UTF-8 -t ASCII//TRANSLIT&lt;/pre&gt; &lt;p&gt;In this case, &lt;code&gt;iconv&lt;/code&gt; transliterates the letters with diacritics into their diacritic-free equivalents.&lt;/p&gt; &lt;h2&gt;String manipulation in iconv_open&lt;/h2&gt; &lt;p&gt;This extension is probably implemented as a string suffix because the underlying &lt;code&gt;iconv&lt;/code&gt; interface is a POSIX standard, and its signature doesn&amp;#8217;t allow for flags or options. Calls to &lt;code&gt;iconv&lt;/code&gt; are made with a handler obtained by calling &lt;code&gt;iconv_open&lt;/code&gt;, and with the appropriate conversion source and destination character encoding names. The &lt;code&gt;iconv_open&lt;/code&gt; function has the following signature:&lt;/p&gt; &lt;pre&gt;iconv_t iconv_open (const char *tocode, const char *fromcode);&lt;/pre&gt; &lt;p&gt;Thus, the only meaningful way to extend its functionality without introducing a new interface is to pass option information in one of the string arguments.&lt;/p&gt; &lt;p&gt;The glibc &lt;code&gt;iconv&lt;/code&gt; implementation recognizes and uses conversion source and destination encodings in the form of a slash-separated triplet:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first component of the triplet might be an encoding form, which implies a character set.&lt;/li&gt; &lt;li&gt;Alternatively, it might be a character set where a second component is ideally an encoding form for the underlying character set. If the encoding form is left unspecified, &lt;code&gt;iconv&lt;/code&gt; uses a default.&lt;/li&gt; &lt;li&gt;The third component of the triplet is the optional suffix that enables GNU extensions. This means UCS-2// and ISO-10646/UCS-2/ are equivalent.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;However, because most of the common &lt;code&gt;iconv&lt;/code&gt; invocations simply use encoding forms, the second component of the slash-separated specification was forgotten when documenting the interface, and the manual page ended up with the following fragment:&lt;/p&gt; &lt;pre&gt;Furthermore the GNU C library and the GNU libiconv library support the following two suffixes: //TRANSLIT When the string "//TRANSLIT" is appended to &lt;i&gt;tocode&lt;/i&gt;, transliteration is activated. This means that when a character cannot be represented in the target character set, it can be approximated through one or several similarly looking characters. //IGNORE When the string "//IGNORE" is appended to &lt;i&gt;tocode&lt;/i&gt;, characters that cannot be represented in the target character set will be silently discarded.&lt;/pre&gt; &lt;p&gt;There was no clear explanation of the triplet scheme and how multiple suffixes could be passed, which led to the implementation allowing calls such as:&lt;/p&gt; &lt;pre&gt;$ iconv -f ISO-8859-7 -t UTF-8//TRANSLIT//IGNORE&lt;/pre&gt; &lt;p&gt;Note that the missing second component and the resulting &lt;code&gt;//&lt;/code&gt; were misunderstood as a suffix separator. Based on my reading, this misunderstanding seems to have touched the program code as well.&lt;/p&gt; &lt;h2&gt;Debugging the iconv utility&lt;/h2&gt; &lt;p&gt;Ideally, the &lt;code&gt;iconv&lt;/code&gt; utility program would have avoided supporting options in the form of string suffixes. Instead, it might have supported them only by way of these options, but not in this case. It accepts the same suffixes as the underlying function.&lt;/p&gt; &lt;p&gt;In 2016, a bug was reported against the &lt;code&gt;iconv&lt;/code&gt; utility, uncovering a hang when the &lt;code&gt;TRANSLIT&lt;/code&gt; and &lt;code&gt;IGNORE&lt;/code&gt; suffixes were used in conjunction with bad input and the &lt;code&gt;-c&lt;/code&gt; option. This combination is meant to cause &lt;code&gt;iconv&lt;/code&gt; to omit invalid characters in the input from the output, similar to &lt;code&gt;IGNORE&lt;/code&gt;, as follows:&lt;/p&gt; &lt;pre&gt;$ echo -en '\x80' | iconv -f us-ascii -t us-ascii//translit//ignore -c&lt;/pre&gt; &lt;p&gt;The report gathered comments including hints at the possible causes and other similar hangs. I didn&amp;#8217;t make much progress on the report until 2019, when I started looking at it in depth.&lt;/p&gt; &lt;p&gt;Not knowing much about the internals of the &lt;code&gt;iconv&lt;/code&gt; interface or utility, I decided to start with a bit of testing. I first wanted to check whether there were hangs in the &lt;code&gt;iconv&lt;/code&gt; program other than the one reported. A &amp;#8220;back of the envelope&amp;#8221; calculation led me to conclude that it would take mere days to test every single two-byte input combination for all combinations of program switches and conversionsâdays that I wouldn&amp;#8217;t have to spend analyzing or debugging &lt;code&gt;iconv&lt;/code&gt; code.&lt;/p&gt; &lt;p&gt;One bash script and roughly a week later, I presented the results. There were hangs while converting 165 character sets. Almost all, with the exception of four, occurred when using the option suffixes (&lt;code&gt;TRANSLIT&lt;/code&gt; and &lt;code&gt;IGNORE&lt;/code&gt;) and the &lt;code&gt;-c&lt;/code&gt; switch, which silenced error messages upon encountering invalid characters. It seemed clear that the problem was general and did not correspond to a bug in a specific character set&amp;#8217;s converter.&lt;/p&gt; &lt;p&gt;After some debugging, I realized that the option suffixes were handled in string form during the program, instead of being used once to set corresponding flags that are subsequently used exclusively. Bugs in the code led to all but the first option being dropped. This led to hangs when the &lt;code&gt;IGNORE&lt;/code&gt; option was passed after &lt;code&gt;TRANSLIT&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Fixing this involved a somewhat significant change in &lt;code&gt;iconv&lt;/code&gt;&amp;#8216;s option parsing logic, but once that was &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/git/?p=glibc.git;a=commit;h=91927b7c7643"&gt;fixed&lt;/a&gt;, the hangs vanished.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Eventually, I fixed the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/git/?p=glibc.git;a=commit;h=9a99c682144b"&gt;remaining known hangs&lt;/a&gt; in &lt;code&gt;iconv&lt;/code&gt;. I am finally beginning to feel a bit more comfortable with the codebase. There is still some work to do in glibc&amp;#8217;s &lt;code&gt;iconv&lt;/code&gt; implementationâamong other things, improving the manual page. A new interface would also be useful.&lt;/p&gt; &lt;p&gt;For more information on C and C++, please visit &lt;a target="_blank" rel="nofollow" href="/topics/c"&gt;Red Hat&amp;#8217;s topic page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#38;linkname=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F23%2Fsolving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility%2F&amp;#038;title=Solving%20the%20mystery%20of%20hanging%20character%20set%20conversions%20in%20glibc%E2%80%99s%20iconv%20utility" data-a2a-url="https://developers.redhat.com/blog/2021/04/23/solving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility/" data-a2a-title="Solving the mystery of hanging character set conversions in glibcâs iconv utility"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/23/solving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility/"&gt;Solving the mystery of hanging character set conversions in glibc&amp;#8217;s iconv utility&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/092iyWe5tDM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Website visitors don&amp;#8217;t typically consider character encoding and conversion when accessing digital content. However, engineers have been dealing with conversion issues since users started transferring strings from one computer to another. Today, when more than 95 percent of all web pages use UTF-8, converting data between character sets might seem less relevant. However, it continues [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/23/solving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility/"&gt;Solving the mystery of hanging character set conversions in glibc&amp;#8217;s iconv utility&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/23/solving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">809287</post-id><dc:creator>Arjun Shankar</dc:creator><dc:date>2021-04-23T07:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/23/solving-the-mystery-of-hanging-character-set-conversions-in-glibcs-iconv-utility/</feedburner:origLink></entry><entry><title type="html">The Score card editor goes online</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/c9t3ZnCuUyY/the-score-card-editor-goes-online.html" /><author><name>Michael Anstis</name></author><id>https://blog.kie.org/2021/04/the-score-card-editor-goes-online.html</id><updated>2021-04-22T17:30:03Z</updated><content type="html">Following the , that our Score Card editor is available in VSCode, it can now be tried . The online landing page There is no better time to give it a look and provide feedback to drive its road map. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/c9t3ZnCuUyY" height="1" width="1" alt=""/&gt;</content><dc:creator>Michael Anstis</dc:creator><feedburner:origLink>https://blog.kie.org/2021/04/the-score-card-editor-goes-online.html</feedburner:origLink></entry><entry><title>Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MX7-qS50crg/" /><category term=".NET" /><category term="Containers" /><category term="Kubernetes" /><category term="Windows" /><category term=".NET 5" /><category term=".NET containers" /><category term="openshift" /><category term="Windows containers" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=876847</id><updated>2021-04-22T07:00:44Z</updated><published>2021-04-22T07:00:44Z</published><content type="html">&lt;p&gt;Developers who use and target Microsoft&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="/topics/dotnet"&gt;.NET&lt;/a&gt; Framework are no longer outsiders looking in when it comes to developing &lt;a target="_blank" rel="nofollow" href="/topics/containers"&gt;container-based applications&lt;/a&gt;. Whether porting an existing application (for example, a website running in IIS) or creating a new &lt;a target="_blank" rel="nofollow" href="/topics/microservices"&gt;microservice&lt;/a&gt;, or somewhere in between, it is now possibleâthanks to Windows containersâto deploy .NET Framework applications to your &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; clusters. This article explores the option of running .NET Framework applications in Windows containers in OpenShift clusters.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article is part of a series introducing &lt;a target="_blank" rel="nofollow" href="/blog/2021/03/16/three-ways-to-containerize-net-applications-on-red-hat-openshift/"&gt;three ways to containerize .NET applications on Red Hat OpenShift&lt;/a&gt;. The previous article introduced &lt;a target="_blank" rel="nofollow" href="/blog/2021/04/15/containerize-net-for-red-hat-openshift-linux-containers-and-net-core/"&gt;Linux containers for .NET Core&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;span id="more-876847"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Windows containers?&lt;/h2&gt; &lt;p&gt;A quick history lesson is in order. While &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; containers can trace their origins all the way back to the &lt;code&gt;chroot&lt;/code&gt; system call created in 1979 (Yes, you read that right: Nineteen seventy-nine), the first generally-recognized full implementation of Linux containers began in 2008 with LXCâ LinuX Containers. Two LXC implementations, &lt;a target="_blank" rel="nofollow" href="https://github.com/cloudfoundry-attic/warden"&gt;Warden&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/google/lmctfy"&gt;LMCTFY&lt;/a&gt;, had mild success, but Linux containers really took off with the introduction of Docker in 2013. Following that, issues such as &lt;a target="_blank" rel="nofollow" href="/topics/security"&gt;security&lt;/a&gt;, scaling, networking, and more, blossomed and continue to improve with age. Linux containers have reached the level of acceptance and maturity such that they are arguably becoming the new standard in software development.&lt;/p&gt; &lt;p&gt;Windows containers were introduced to the .NET ecosystem with the release of Windows Server 2016, allowing developers to build, manage, and treat .NET Framework applications just like Linux containers. Commands such as &lt;code&gt;docker build&lt;/code&gt; and &lt;code&gt;docker run&lt;/code&gt; were identical on Windows and Linux. The only difference was the underlying operating system.&lt;/p&gt; &lt;p&gt;Red Hat announced general availability (GA) and support for Windows containers in OpenShift in late December 2020. This meansâI&amp;#8217;m repeating myself because it is just so amazingâthat you can build an image of your .NET Framework application (such as a website running on IIS) on your Windows PC and run it in your OpenShift cluster.&lt;/p&gt; &lt;p&gt;There is just one consideration: You need a Windows node in your cluster.&lt;/p&gt; &lt;h2&gt;Running Windows containers in OpenShift&lt;/h2&gt; &lt;p&gt;Operations folks, take note: In order to run Windows containers in OpenShift, you&amp;#8217;ll need a cluster that includes a Windows node capable of running Windows containers. That&amp;#8217;s the &amp;#8220;magic sauce&amp;#8221; for running Windows containers in OpenShift. Currently, Windows Server 2019 is the best choice for running Windows containers.&lt;/p&gt; &lt;p&gt;Developers, you have it easy. As a builder of bits, you won&amp;#8217;t really see much difference; you&amp;#8217;ll create your application, build an image, and it will be deployed to OpenShift. A nice thing is that you won&amp;#8217;t have to worry about applications running on the same port. OpenShift is built on Kubernetes, and Kubernetes automagically assigns ports and keeps track of the mapping between what it (Kubernetes) exposes and what your application uses.&lt;/p&gt; &lt;h2&gt;A recipe for success&lt;/h2&gt; &lt;p&gt;Once you have a cluster capable of running Windows containers, I have created a &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/netcandystore"&gt;GitHub repository&lt;/a&gt; (repo) with code and instructions for you to give this exciting technology a go. Until then, you can read and follow along here. Sort of like reading a recipe before you actually make that wonderful dinner.&lt;/p&gt; &lt;p&gt;Super awesome bonus material alert: The repo includes instructions, scripts, and data for creating and building a Microsoft SQL Server database &lt;em&gt;inside your OpenShift&lt;/em&gt; cluster, because why not get dessert with dinner?&lt;/p&gt; &lt;h2&gt;Building the Windows container image&lt;/h2&gt; &lt;p&gt;To build a Windows container image, we need the following ingredients:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A compiled .NET Framework applicationâin this case, a website to run in IIS&lt;/li&gt; &lt;li&gt;A configuration file to build the image, &amp;#8220;Dockerfile,&amp;#8221; that puts everything together&lt;/li&gt; &lt;li&gt;A command to build the image&lt;/li&gt; &lt;li&gt;An image registry where we can store the image, which we&amp;#8217;ll eventually pull into our OpenShift cluster&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;The compiled application&lt;/h3&gt; &lt;p&gt;We&amp;#8217;re building a website called &amp;#8220;Net Candy Store,&amp;#8221; the MVP (minimal viable project) that our startup needs to get up and running ASAP. At this point, the application is not fully functional, but we want to start building and deploying right away and fine-tune things as we move along.&lt;/p&gt; &lt;p&gt;Using the Git repo I mentioned earlier, we&amp;#8217;ll use the solution (&lt;code&gt;netcandystore.sln&lt;/code&gt;) file in Visual Studio, as shown in Figure 1. Once there, we can use the &lt;b&gt;Publish&lt;/b&gt; option to create the bits neededâthe &lt;code&gt;netcandystore.dll&lt;/code&gt; binary.&lt;/p&gt; &lt;div id="attachment_882287" style="width: 933px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-882287" class=" size-full wp-image-882287 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish.png" alt="visual studio publish dialog box" width="923" height="275" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish.png 923w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish-300x89.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish-768x229.png 768w" sizes="(max-width: 923px) 100vw, 923px" /&gt;&lt;p id="caption-attachment-882287" class="wp-caption-text"&gt;Figure 1: The Publish Dialog box in Visual Studio.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;That Target location is copied and pasted into our image build configuration file, &amp;#8220;Dockerfile.&amp;#8221;&lt;/p&gt; &lt;h3&gt;The Dockerfile&lt;/h3&gt; &lt;p&gt;Now, we need the instructions for the &lt;code&gt;docker build&lt;/code&gt; command, which are stored in the file, &amp;#8220;Dockerfile.&amp;#8221; Typically, grammar aside, this is just called &amp;#8220;the Dockerfile,&amp;#8221; so we&amp;#8217;ll continue with that. Here are the contents of the Dockerfile:&lt;/p&gt; &lt;pre&gt;# The `FROM` instruction specifies the base image. You are # extending the `microsoft/aspnet` image. FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8 # The final instruction copies the site you published earlier into the container. COPY ./bin/app.publish/ /inetpub/wwwroot &lt;/pre&gt; &lt;p&gt;Basically, we have just two things to do: Use the base image from Microsoft, and copy our binary to the newly-built image. This is literally the simplest Dockerfile I&amp;#8217;ve ever seen.&lt;/p&gt; &lt;h3&gt;A command to build the image&lt;/h3&gt; &lt;p&gt;With all that in place, we use the &lt;code&gt;docker build&lt;/code&gt; command to build the image. For the name and tag of our image, I will use a fully-qualified name that points to the image registry where I&amp;#8217;ll later push the image. The commands I send to OpenShift will pull from that registry. If you use the instructions in &lt;a target="_blank" rel="nofollow" href="https://github.com/donschenck/netcandystore"&gt;the git repo I mentioned earlier&lt;/a&gt;, you&amp;#8217;ll be using &lt;a target="_blank" rel="nofollow" href="https://quay.io/repository/donschenck/netcandystore?tag=latest&amp;#38;tab=tags"&gt;the same image&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With that in mind, here&amp;#8217;s how to build the Windows container image that will run in OpenShift:&lt;/p&gt; &lt;pre&gt;docker build -t quay.io/donschenck/netcandystore:2021mar8.1 .&lt;/pre&gt; &lt;h3&gt;An image registry to store the image&lt;/h3&gt; &lt;p&gt;Now, after logging into my quay.io account, I can run the following command to make the image registry available:&lt;/p&gt; &lt;pre&gt;docker push quay.io/donschenck/netcandystore:2021mar8.1&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;What about licensing?&lt;/strong&gt; To put it simply: Licensing relies on the host machine where you are running the containers. You can find more information on &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/faq"&gt;this Microsoft FAQ page&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Deploying the image in your Windows container&lt;/h2&gt; &lt;p&gt;It&amp;#8217;s go time. We are ready to deploy this image to our Windows container host on OpenShift and start enjoying the fruits of our .NET Framework labors. But there&amp;#8217;s a small catch: If you try to deploy to your cluster, the deployment could crash with a timeout error. There&amp;#8217;s a simple workaround, and I&amp;#8217;ve included a sample of it in my Git repo. The trick is to &lt;code&gt;docker pull&lt;/code&gt; the somewhat large Windows server image (5.25 GB) to your cluster&amp;#8217;s Windows node from within the node itself. As a bonus, if you run other Windows containers in your cluster, on the same Windows node, they can use that same server image. In other words, you probably only need to do this &amp;#8220;preload&amp;#8221; once.&lt;/p&gt; &lt;p&gt;The details of this step are on my Git repo, so I won&amp;#8217;t repeat them here. The overview is this: Find the name of the Windows node and use SSH to run the &lt;code&gt;docker pull&lt;/code&gt; command inside of it. Once that is doneâit takes two or three minutesâthe rest is typical OpenShift operations: Create a deployment that points to your application image, an associated service, and a route to publicly expose it.&lt;/p&gt; &lt;h2&gt;Conclusion: A guide to follow&lt;/h2&gt; &lt;p&gt;If you want to follow a step-by-step guide, including code for a Windows container, an installation of SQL Server on OpenShift, and the installation of a .NET 5 (&lt;a target="_blank" rel="nofollow" href="/topics/dotnet"&gt;.NET Core&lt;/a&gt;) application running in a Linux container, follow this repo: &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/netcandystore"&gt;https://github.com/redhat-developer-demos/netcandystore&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#038;title=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" data-a2a-url="https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/" data-a2a-title="Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/"&gt;Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MX7-qS50crg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Developers who use and target Microsoft&amp;#8217;s .NET Framework are no longer outsiders looking in when it comes to developing container-based applications. Whether porting an existing application (for example, a website running in IIS) or creating a new microservice, or somewhere in between, it is now possibleâthanks to Windows containersâto deploy .NET Framework applications to your [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/"&gt;Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">876847</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2021-04-22T07:00:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/</feedburner:origLink></entry><entry><title>Using Podman Compose with Microcks: A cloud-native API mocking and testing tool</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/P6Tzmat8xRs/" /><category term="Containers" /><category term="Kubernetes" /><category term="Open source" /><category term="API testing" /><category term="Microcks" /><category term="Podman" /><category term="rootless containers" /><author><name>Nicolas MassÃ©</name></author><id>https://developers.redhat.com/blog/?p=872867</id><updated>2021-04-22T07:00:12Z</updated><published>2021-04-22T07:00:12Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://microcks.io/"&gt;Microcks&lt;/a&gt; is a cloud-native API mocking and testing tool. It helps you cover your &lt;a target="_blank" rel="nofollow" href="/blog/2019/02/25/full-api-lifecycle-management-a-primer/"&gt;API&amp;#8217;s full lifecycle&lt;/a&gt;Â by taking your OpenAPI specifications and generating live mocks from them. It can also assert that your API implementation conforms to your OpenAPI specifications. You can deploy Microcks in a wide variety of cloud-native platforms, such as &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Developers who do not have corporate access to a cloud-native platform have used &lt;a target="_blank" rel="nofollow" href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;. Although Docker is still the most popular container option for software packaging and installation, &lt;a target="_blank" rel="nofollow" href="https://podman.io/"&gt;Podman&lt;/a&gt; is gaining traction.&lt;/p&gt; &lt;p&gt;Podman was advertised as a drop-in replacement for Docker. Advocates gave the impression that you could issue &lt;code&gt;alias docker=podman&lt;/code&gt; and you would be good to go. The reality is more nuanced, and the community had to work to get proper &lt;code&gt;docker-compose&lt;/code&gt; support in Microcks for Podman.&lt;/p&gt; &lt;p&gt;This article discusses the barriers to getting Microcks to work with Podman and the design decisions we made to get around them. It includes a brief example of using Podman in rootless mode with Microcks.&lt;/p&gt; &lt;h2&gt;Supporting Podman in Microcks&lt;/h2&gt; &lt;p&gt;Podman presented a few design barriers, which the Microcks community had to work around. We&amp;#8217;ll discuss the barriers and how we worked around them, and what those decisions mean for developers using Podman with Microcks.&lt;/p&gt; &lt;h3&gt;Rootfull or rootless?&lt;/h3&gt; &lt;p&gt;Docker requires running a daemon as root, which observers have long criticized as insecure. Podman adopted a very different architecture: It involves no daemon at all and can run as root (rootfull mode) or as a regular user (rootless mode). Microcks supports Podman in either rootfull or rootless mode.&lt;/p&gt; &lt;p&gt;Although rootless mode looks very appealing, it does not come without cost. Drawbacks include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Containers have no IP address and no DNS aliases.&lt;/li&gt; &lt;li&gt;Port redirection is done in userspace, whereas rootfull mode uses &lt;a target="_blank" rel="nofollow" href="https://linux.die.net/man/8/iptables"&gt;iptables&lt;/a&gt;, which is faster.&lt;/li&gt; &lt;li&gt;The overlay storage is done in userspace with &lt;a target="_blank" rel="nofollow" href="https://cloud.google.com/storage/docs/gcs-fuse"&gt;FUSE&lt;/a&gt;, which is slower than the traditional &lt;a target="_blank" rel="nofollow" href="https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html"&gt;overlayFS&lt;/a&gt; mount.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Still, unless you need high performance or a specific network setup, you can use rootless mode.&lt;/p&gt; &lt;h3&gt;DNS aliases: Still in the way&lt;/h3&gt; &lt;p&gt;Microcks needs proper DNS aliases in place to work properly. The main reason is that Microcks uses the OpenID Connect protocol for user authentication, which involves both user-facing interactions and server-to-server interactions.&lt;/p&gt; &lt;p&gt;Combined with the quirks and limitations of the other software in the stack (Keycloak, Docker, Podman), this requirement explains why it has always been challenging to get Microcks running without tinkering with the Docker Compose configuration.&lt;/p&gt; &lt;p&gt;To work around this issue, the community created a shell script that discovers the current machine IP address and hardcodes that address in the &lt;code&gt;podman-compose&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;To get DNS aliases working, you need to enable theÂ &lt;code&gt;dnsname&lt;/code&gt;Â plugin in the defaultÂ &lt;code&gt;podman&lt;/code&gt; network.&lt;/p&gt; &lt;h3&gt;Networking&lt;/h3&gt; &lt;p&gt;With the rootfull mode in Podman came another challenge: By default, containers can refer to other containers only by their IP addresses. This command re-creates the default &lt;code&gt;podman&lt;/code&gt; network and enables the &lt;code&gt;dnsname&lt;/code&gt;Â plugin:&lt;/p&gt; &lt;pre&gt;$ sudo podman network rm podman $ sudo podman network create --subnet 10.88.0.0/16 podman &lt;/pre&gt; &lt;h2&gt;Using Podman Compose with Microcks&lt;/h2&gt; &lt;p&gt;Podman support might not look glorious as presented here, but the benefits of using Podman are worth the effort!&lt;/p&gt; &lt;p&gt;The rootless mode is the easiest and safest way to get Microcks working with Podman Compose:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/microcks/microcks.git $ cd microcks/install/podman-compose $ ./run-microcks.sh Running rootless containers... Discovered host IP address: 192.168.3.102 Starting Microcks using podman-compose ... ------------------------------------------ Stop it with: podman-compose -f microcks.yml --transform_policy=identity stop Re-launch it with: podman-compose -f microcks.yml --transform_policy=identity start Clean everything with: podman-compose -f microcks.yml --transform_policy=identity down ------------------------------------------ Go to https://localhost:8080 - first login with admin/123 Having issues&lt;span class="pl-k"&gt;?&lt;/span&gt; Check you have changed microcks.yml to your platform using podman version: podman version 2.1.1 podman run [...]&lt;/pre&gt; &lt;p&gt;Rootfull mode requires that you enable theÂ &lt;code&gt;dnsname&lt;/code&gt;Â plugin on the defaultÂ &lt;code&gt;podman&lt;/code&gt; network, as described earlier. Then, you would just run this script with sudo.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Getting Microcks to work with Podman was not particularly difficult. We hope this support will help you get started with using Microcks in corporate environments. Read the &lt;a target="_blank" rel="nofollow" href="https://microcks.io/blog/podman-compose-support/"&gt;announcement on microcks.io&lt;/a&gt; for more details.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#038;title=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" data-a2a-url="https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/" data-a2a-title="Using Podman Compose with Microcks: A cloud-native API mocking and testing tool"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/"&gt;Using Podman Compose with Microcks: A cloud-native API mocking and testing tool&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/P6Tzmat8xRs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Microcks is a cloud-native API mocking and testing tool. It helps you cover your API&amp;#8217;s full lifecycleÂ by taking your OpenAPI specifications and generating live mocks from them. It can also assert that your API implementation conforms to your OpenAPI specifications. You can deploy Microcks in a wide variety of cloud-native platforms, such as Kubernetes and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/"&gt;Using Podman Compose with Microcks: A cloud-native API mocking and testing tool&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">872867</post-id><dc:creator>Nicolas MassÃ©</dc:creator><dc:date>2021-04-22T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/</feedburner:origLink></entry><entry><title>Remote LLVM development with Visual Studio Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8EdnrkJqKsQ/" /><category term="C" /><category term="clang/LLVM" /><category term="Linux" /><category term="VS Code" /><category term="Remote LLVM" /><category term="Visual Studio Code" /><category term="VS Code for LLVM" /><author><name>Konrad Kleine</name></author><id>https://developers.redhat.com/blog/?p=434777</id><updated>2021-04-22T07:00:11Z</updated><published>2021-04-22T07:00:11Z</published><content type="html">&lt;p&gt;I used the &lt;a target="_blank" rel="nofollow" href="https://www.qt.io/product/development-tools"&gt;Qt Creator IDE&lt;/a&gt; for most of my &lt;a target="_blank" rel="nofollow" href="/topics/c"&gt;C++&lt;/a&gt; work in the past. Then I joined Red Hat around mid-2016 and worked on a project with &lt;a target="_blank" rel="nofollow" href="/blog/category/go/"&gt;Go&lt;/a&gt; for three years. I quickly realized that I wanted something similar to Qt Creator. Iâm a regular &lt;a target="_blank" rel="nofollow" href="https://www.vim.org/"&gt;Vim&lt;/a&gt; user, but use it only for plain-text editing and not much more. I gave Vim a shot when really I was looking for something that works out of the box and can still be customized. As usual for a modern project, I needed to be able to do more than edit the files of one programming realm. Enter &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; (&lt;a target="_blank" rel="nofollow" href="/blog/category/vs-code/"&gt;VS Code&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;I can&amp;#8217;t say that VS Code worked out of the box. But being new to Go, I figured I would give it a try, especially because others were using it. Three years later, in 2019, I needed a change and joined our debuggers group to work on &lt;a target="_blank" rel="nofollow" href="https://lldb.llvm.org/"&gt;LLDB&lt;/a&gt;, a debugger that is part of the much larger &lt;a target="_blank" rel="nofollow" href="https://llvm.org/"&gt;LLVM&lt;/a&gt; project. LLVM also hosts &lt;a target="_blank" rel="nofollow" href="/blog/category/clang-llvm/"&gt;Clang&lt;/a&gt;, a well-known compiler front-end for C-like languages.&lt;/p&gt; &lt;p&gt;I began by checking out the LLVM codebaseâwhich is huge, by the wayâand compiling it on my local machine, which was very slow. You can read about my initial endeavor to speed up the compilation in &lt;a target="_blank" rel="nofollow" href="/blog/2019/05/15/2-tips-to-make-your-c-projects-compile-3-times-faster/"&gt;this article&lt;/a&gt;. To sum things up: A notebook isnât ideal when you want to code and compile with LLVM. The speed of compilation isnât the only thing that matters. Itâs the linking, as well, that can easily freeze my laptop. That said, distributed compilation using &lt;a target="_blank" rel="nofollow" href="https://github.com/distcc/distcc"&gt;distcc&lt;/a&gt; or similar tools doesn&amp;#8217;t cut it.&lt;/p&gt; &lt;p&gt;Our group in Red Hat has access to high-powered shared machines in Toronto (e.g., 56 cores with 256 GB of memory). I live in Germany, and at first I was skeptical whether I could successfully use those machines without too much latency. Qt Creator wasnât a true option for editing files remotely because, as far as I know, it needed to run next to the code it was supposed to compile. After giving Vim and &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; another shot for coding and compiling remotely, I went back to VS Code and found out that thereâs a &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/remote/ssh"&gt;remote SSH extension&lt;/a&gt;. This article navigates you through how Iâve been using VS Code&amp;#8217;s remote SSH extension for editing and compiling LLVM, step by step.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;My base system is a laptop running the &lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;Fedora&lt;/a&gt;Â 32 operating system. For the sake of this tutorial, weâll call the remote host just &lt;code&gt;remote-host&lt;/code&gt;. If you want to follow the tutorial step by step, you can put the following into your &lt;code&gt;~/.ssh/config&lt;/code&gt; file to create an alias to whatever host you want:&lt;/p&gt; &lt;pre&gt;Host remote-host HostName YOUR_OWN_REMOTE_HOST_GOES_HERE User USER_NAME_WITH_WHICH_YOU_LOGIN_TO_YOUR_REMOTE_HOST&lt;/pre&gt; &lt;p&gt;Replace the obvious bits in that definition. Make sure you can log in to the remote host &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication"&gt;without entering a password&lt;/a&gt; by copying the public part of your SSH-key to the remote host: &lt;code&gt;ssh-copy-id remote-host&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Double-check that you can now log in using &lt;code&gt;ssh remote-host&lt;/code&gt;. Now log back out.&lt;/p&gt; &lt;h2&gt;Setting up VS Code&lt;/h2&gt; &lt;p&gt;First, make sure you have a recent copy of VS Code or grab it from &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/download"&gt;the download site&lt;/a&gt;. Once it&amp;#8217;s installed, you will need a bunch of extensions. To install the extensions I find useful when building and editing LLVM, run this snippet in the command line:&lt;/p&gt; &lt;pre&gt;$ for i in ms-vscode.cmake-tools \ ms-vscode-remote.remote-ssh \ ms-python.python \ ms-vscode.cpptools \ twxs.cmake \ rreverser.llvm \ jakob-erzar.llvm-tablegen \ xaver.clang-format \ pkief.material-icon-theme; do code --install-extension $i; done&lt;/pre&gt; &lt;h2&gt;Preparing the remote host&lt;/h2&gt; &lt;p&gt;In my case, the architecture of the remote host (Fedora 31) and my laptop is the same: x86_64. I&amp;#8217;m not sure if this always needs to be the case. I can confirm that instead of my &lt;a target="_blank" rel="nofollow" href="/topics/linux"&gt;Linux&lt;/a&gt; laptop and Linux remote host, I can use a Mac laptop and a Linux remote host. I&amp;#8217;m sure the same is true for Windows.&lt;/p&gt; &lt;p&gt;Log in to the remote host with:&lt;/p&gt; &lt;pre&gt;$ ssh remote-host&lt;/pre&gt; &lt;p&gt;Your remote host needs to have all the development tools installed that are required to build LLVM.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s decide where to download LLVM and refer to it with an environment variable for now. In my case, the directory is &lt;em&gt;not&lt;/em&gt; &lt;code&gt;~/&lt;/code&gt; which would have simplified things a bit:&lt;/p&gt; &lt;pre&gt;$ export MYHOME=/opt/notnfs/kkleine/ # replace this with ~/&lt;/pre&gt; &lt;p&gt;Navigate to &lt;code&gt;$MYHOME&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cd $MYHOME&lt;/pre&gt; &lt;p&gt;Fetch the LLVM source tree:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/llvm/llvm-project&lt;/pre&gt; &lt;p&gt;Now create a build directory inside the source directory:&lt;/p&gt; &lt;pre&gt;$ mkdir llvm-project/build&lt;/pre&gt; &lt;p&gt;This directory makes it simpler to find build files within the VS Code IDE later.&lt;/p&gt; &lt;h2&gt;Firing up VS Code&lt;/h2&gt; &lt;p&gt;When you start VS Code, it presents a screen like Figure 1.&lt;/p&gt; &lt;div id="attachment_802397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47.png"&gt;&lt;img aria-describedby="caption-attachment-802397" class="wp-image-802397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-1024x807.png" alt="VS Code presents a screen full of options at startup." width="640" height="504" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-1024x807.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-300x236.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-768x605.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47.png 1044w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802397" class="wp-caption-text"&gt;Figure 1: The VS Code startup screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notice the little green iconÂ in the lower left corner of the screen. Click on it and select &lt;strong&gt;Remote-SSH: Connect Current Window to Host&amp;#8230;&lt;/strong&gt; as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_802417" style="width: 615px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00.png"&gt;&lt;img aria-describedby="caption-attachment-802417" class="wp-image-802417 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00.png" alt="Menu displayed when you pull down the green icon in the lower left corner of the startup screen." width="605" height="138" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00.png 605w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00-300x68.png 300w" sizes="(max-width: 605px) 100vw, 605px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802417" class="wp-caption-text"&gt;Figure 2: Select &amp;#8216;Remote-SSH: Connect Current Window to Host&amp;#8230;&amp;#8217; from the menu.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you&amp;#8217;ve configured your &lt;code&gt;~/.ssh/config&lt;/code&gt; properly, you can now select &lt;code&gt;remote-host&lt;/code&gt; from the drop-down list. Notice that the green icon from before now shows &lt;strong&gt;Opening Remote &amp;#8230;&lt;/strong&gt; and then turns into &lt;strong&gt;SSH: remote-host&lt;/strong&gt; once you have connected successfully.&lt;/p&gt; &lt;p&gt;Congratulations: You can now edit files on your remote host using VS Code. To test this, go to &lt;strong&gt;Fileâ&amp;#62;Open File&amp;#8230;&lt;/strong&gt; and open the main &lt;code&gt;CMakeLists.txt&lt;/code&gt; file from the LLVM project that you checked out earlier: &lt;code&gt;/opt/notnfs/kkleine/llvm-project/llvm/CMakeLists.txt&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Installing extensions remotely&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s head over to the extensions by clicking on the extensions symbol, which is a grid of squares. Notice that the side panel shows locally installed extensions and marks some with &lt;strong&gt;Install in SSH: remote-host&lt;/strong&gt;. Click that little green icon to view all the extensions that can be installed on the remote host. Once that&amp;#8217;s done, click the blue &lt;strong&gt;Reload Required&lt;/strong&gt;Â icon and enjoy all the extensions when developing remotely.&lt;/p&gt; &lt;h2&gt;Adjusting the settings&lt;/h2&gt; &lt;p&gt;We need to adjust some settings for &lt;a target="_blank" rel="nofollow" href="https://cmake.org/"&gt;CMake&lt;/a&gt; to work properly. Press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; to open the command palette in Visual Studio Code and start typing &lt;code&gt;&amp;#62;open remote set&lt;/code&gt;, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_802627" style="width: 616px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03.png"&gt;&lt;img aria-describedby="caption-attachment-802627" class="wp-image-802627 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03.png" alt="When you type '&amp;#62;open remote se' in the command palette, VS Code autofills it to 'Open Remote Settings (SSH: remote-host)'." width="606" height="72" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03.png 606w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03-300x36.png 300w" sizes="(max-width: 606px) 100vw, 606px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802627" class="wp-caption-text"&gt;Figure 3: Autofill in the command palette.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then, click on &lt;strong&gt;Preferences: Open Remote Settings (SSH: remote-host)&lt;/strong&gt;. This should open up a &lt;code&gt;settings.json&lt;/code&gt; file in a new tab, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_802647" style="width: 519px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21.png"&gt;&lt;img aria-describedby="caption-attachment-802647" class="wp-image-802647 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21.png" alt="The initial contents of the remote settings file: An empty set of braces." width="509" height="107" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21.png 509w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21-300x63.png 300w" sizes="(max-width: 509px) 100vw, 509px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802647" class="wp-caption-text"&gt;Figure 4: Open the remote settings file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This file is an empty &lt;a target="_blank" rel="nofollow" href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/getstarted/settings"&gt;settings&lt;/a&gt; file, in my case. If you already have configurations in there, I assume that you have used VS Code before and know how to integrate my settings into yours. If your file is empty, you can copy the settings here:&lt;/p&gt; &lt;pre&gt;{ //-------------------------------------------------------------------------- // C++ //-------------------------------------------------------------------------- "clang-format.fallbackStyle": "LLVM", "clang-format.style": "LLVM", "C_Cpp.clang_format_style": "LLVM", "C_Cpp.default.cppStandard": "c++14", "C_Cpp.default.cStandard": "c11", //-------------------------------------------------------------------------- // CMake //-------------------------------------------------------------------------- "cmake.generator": "Ninja", // Adjust this path to the expansion of $MYHOME/llvm-project/llvm. "cmake.sourceDirectory": "/opt/notnfs/kkleine/llvm-project/llvm", // Adjust this path to the expansion of $MYHOME/llvm-project/build. "cmake.buildDirectory": "/opt/notnfs/kkleine/llvm-project/build", "cmake.configureSettings": { "LLVM_ENABLE_PROJECTS": ["clang","clang-tools-extra","compiler-rt","lld","mlir"], "CMAKE_EXPORT_COMPILE_COMMANDS": 1, "BUILD_SHARED_LIBS": "Off", "LLVM_BUILD_LLVM_DYLIB": "On", "LLVM_LINK_LLVM_DYLIB": "On", "CLANG_LINK_CLANG_DYLIB": "On", // I only need LLVM Backends to produce X86, decide what you need here! "LLVM_TARGETS_TO_BUILD": "X86", "LLVM_ENABLE_LDD": "On", "LLVM_CCACHE_BUILD": "On", "LLVM_CCACHE_MAXSIZE": "20G", "LLVM_ENABLE_IDE": "On", "LLVM_ENABLE_ASSERTIONS": "On", "LLVM_BUILD_EXAMPLES": "On", "LLVM_LIT_ARGS": "-v --xunit-xml-output test-results.xml", "PYTHON_EXECUTABLE": "/usr/bin/python3", }, //-------------------------------------------------------------------------- // Editor //-------------------------------------------------------------------------- "editor.mouseWheelZoom": true, "editor.renderIndentGuides": false, "editor.rulers": [80], "editor.formatOnPaste": false, "editor.renderWhitespace": "all", //-------------------------------------------------------------------------- // Misc //-------------------------------------------------------------------------- "telemetry.enableTelemetry": false, "telemetry.enableCrashReporter": false, "": { "editor.defaultFormatter": "xaver.clang-format" }, "workbench.iconTheme": "material-icon-theme", }&lt;/pre&gt; &lt;p&gt;I&amp;#8217;ve added a minimum of my personal settings to the JSON file. You can omitÂ the &lt;code&gt;Editor&lt;/code&gt; and &lt;code&gt;Misc&lt;/code&gt; sections if you don&amp;#8217;t want them. When you are done, save the file with &lt;strong&gt;Ctrl+S&lt;/strong&gt;.&lt;/p&gt; &lt;h2&gt;Configuring the LLVM project with CMake&lt;/h2&gt; &lt;p&gt;Click on &lt;strong&gt;Fileâ&amp;#62;Open Folder&lt;/strong&gt; and type in the expansion of &lt;code&gt;$MYHOME/llvm-project&lt;/code&gt; (e.g.,&lt;code&gt;~/llvm-project&lt;/code&gt;), as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_802747" style="width: 614px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33.png"&gt;&lt;img aria-describedby="caption-attachment-802747" class="wp-image-802747 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33.png" alt="Type the absolute path to the llvm-project folder into the Open Folder dialog." width="604" height="67" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33.png 604w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33-300x33.png 300w" sizes="(max-width: 604px) 100vw, 604px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802747" class="wp-caption-text"&gt;Figure 5: Type in the absolute path to the llvm-project folder.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Open up the command palette in VS Code again by typing &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; followed by &lt;code&gt;&amp;#62;cmake&lt;/code&gt;. This should bring up the list in Figure 6, from which you can select &lt;strong&gt;CMake: Select a Kit&lt;/strong&gt;.&lt;/p&gt; &lt;div id="attachment_802777" style="width: 611px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29.png"&gt;&lt;img aria-describedby="caption-attachment-802777" class="wp-image-802777 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29.png" alt="Select the option 'CMake: Select a Kit'." width="601" height="109" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29.png 601w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29-300x54.png 300w" sizes="(max-width: 601px) 100vw, 601px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802777" class="wp-caption-text"&gt;Figure 6: Select the &amp;#8216;CMake: Select a Kit&amp;#8217; option.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the next dialog, shown in Figure 7, pick the compiler you want to use for compiling LLVM, or select &lt;strong&gt;[Scan for kits]&lt;/strong&gt; if you don&amp;#8217;t see any options. (I chose Clang 9.0.1.)&lt;/p&gt; &lt;div id="attachment_802767" style="width: 628px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07.png"&gt;&lt;img aria-describedby="caption-attachment-802767" class="wp-image-802767 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07.png" alt="A list of compiler options." width="618" height="230" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07.png 618w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07-300x112.png 300w" sizes="(max-width: 618px) 100vw, 618px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802767" class="wp-caption-text"&gt;Figure 7: VS Code presents the available compiler options.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, you need to decide on the build variant in which CMake will configure your project. Bring back the command palette with &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and Type &lt;code&gt;CMake Select Variant&lt;/code&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_802797" style="width: 623px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04.png"&gt;&lt;img aria-describedby="caption-attachment-802797" class="wp-image-802797 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04.png" alt="Selecting a build variant through &amp;#34;CMake Select Variant&amp;#34;" width="613" height="75" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04-300x37.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802797" class="wp-caption-text"&gt;Figure 8: Select a build variant through &amp;#8216;CMake Select Variant&amp;#8217;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, choose &lt;strong&gt;Release&lt;/strong&gt;, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_802787" style="width: 626px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12.png"&gt;&lt;img aria-describedby="caption-attachment-802787" class="wp-image-802787 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12.png" alt="Choosing Release as the build variant." width="616" height="142" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12.png 616w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12-300x69.png 300w" sizes="(max-width: 616px) 100vw, 616px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802787" class="wp-caption-text"&gt;Figure 9: Choose Release as the build variant.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notice that the Status bar now looks like Figure 10. From now on, you can control which target you want to build from this bar.&lt;/p&gt; &lt;div id="attachment_802807" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34.png"&gt;&lt;img aria-describedby="caption-attachment-802807" class="wp-image-802807" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34.png" alt="The status bar after choosing a build variant." width="640" height="21" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34.png 720w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34-300x10.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802807" class="wp-caption-text"&gt;Figure 10: The status bar after choosing a build variant.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If an output pane shows something like the following when the configuration is done, you&amp;#8217;ve successfully configured LLVM:&lt;/p&gt; &lt;pre&gt;[cmake] -- Performing Test HAVE_POSIX_REGEX -- success [cmake] -- Performing Test HAVE_STEADY_CLOCK -- success [cmake] -- Configuring done [cmake] -- Generating done [cmake] -- Build files have been written to: /opt/notnfs/kkleine/llvm-project/build&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You can read more about CMake in VS Code in the article &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/cpp/cmake-linux"&gt;&lt;em&gt;Get started with CMake Tools on Linux&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;First build of Clang with VS Code&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s do our first build of Clang. Click on &lt;strong&gt;[all]&lt;/strong&gt; in the status bar and type in &lt;code&gt;clang&lt;/code&gt; to select the &lt;code&gt;clang Executable&lt;/code&gt;. Notice that the status bar now shows &lt;strong&gt;[clang]&lt;/strong&gt; instead of &lt;strong&gt;[all]&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Don&amp;#8217;t be afraid to hit that &lt;strong&gt;[Build]&lt;/strong&gt; button to build the selected target.&lt;/p&gt; &lt;p&gt;Something interesting is that VS Code doesn&amp;#8217;t care whether you chose Ninja or Make to build your project, because it calls CMake to invoke the underlying build system:&lt;/p&gt; &lt;pre&gt;[main] Building folder: llvm-project [build] Starting build [proc] Executing command: /usr/bin/cmake --build /opt/notnfs/kkleine/llvm-project/build --config Release --target clang -- -j 58 [build] [58/2573 0% :: 0.383] Building CXX object lib/Support/CMakeFiles/LLVMSupport.dir/ABIBreak.cpp.o [build] [59/2573 0% :: 0.462] Building CXX object lib/Support/CMakeFiles/LLVMSupport.dir/COM.cpp.o/usr/bin/cmake --build /opt/notnfs/kkleine/llvm-project/build --config Release --target clang -- -j 58&lt;/pre&gt; &lt;h2&gt;Bringing in a terminal&lt;/h2&gt; &lt;p&gt;VS Code does come with a terminal window. You can open it with &lt;strong&gt;Ctrl+`&lt;/strong&gt; (the backtick character). The terminal looks like Figure 11.&lt;/p&gt; &lt;div id="attachment_802867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23.png"&gt;&lt;img aria-describedby="caption-attachment-802867" class="wp-image-802867" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23.png" alt="A command-line interface in the VS Code terminal window." width="640" height="52" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23.png 890w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23-300x24.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23-768x62.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802867" class="wp-caption-text"&gt;Figure 11: A command-line interface in the VS Code terminal window.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Try testing your freshly built compiler with this snippet:&lt;/p&gt; &lt;pre&gt;$ cd build $ echo "int main(){return 42;}" | ./bin/clang++ -x c++ - $ ./a.out ; echo $? 42&lt;/pre&gt; &lt;p&gt;I typically run some commands like &lt;code&gt;./bin/llvm-lit -v &lt;em&gt;sometest&lt;/em&gt;&lt;/code&gt; in the terminal window. One nice thing about the terminal is that you can &lt;strong&gt;Ctrl+Click&lt;/strong&gt; on any of the file paths to open them in the current VS Code window in a new tab. That makes opening and navigating files from the terminal extremely convenient.&lt;/p&gt; &lt;p&gt;From here onward you can use all the goodies of VS Code, such as autocompletion, go-to declaration, switching between header and implementation, and so forth.&lt;/p&gt; &lt;h2&gt;Launching the configuration for LLVM-LIT&lt;/h2&gt; &lt;p&gt;To run &lt;code&gt;llvm-lit -av &lt;em&gt;current_file&lt;/em&gt;&lt;/code&gt; from inside VS Code, without using the terminal, you can bring back the command palette with &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;code&gt;&amp;#62;launch&lt;/code&gt; to open the &lt;code&gt;launch.json&lt;/code&gt; file. The menu displayed looks similar to Figure 12.&lt;/p&gt; &lt;div id="attachment_803187" style="width: 618px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52.png"&gt;&lt;img aria-describedby="caption-attachment-803187" class="wp-image-803187 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52.png" alt="Typing '&amp;#62;launch' into the command palette pulls up a menu of options containing the string 'launch'.." width="608" height="92" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52.png 608w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52-300x45.png 300w" sizes="(max-width: 608px) 100vw, 608px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-803187" class="wp-caption-text"&gt;Figure 12: The menu displayed when you type &amp;#8216;&amp;#62;launch&amp;#8217; into the command palette.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This file can contain multiple semi-generic configurations for programs you want to launch from time to time. Here&amp;#8217;s a configuration that will launch &lt;code&gt;llvm-lit&lt;/code&gt; on the current file:&lt;/p&gt; &lt;pre&gt;{ "version": "0.2.0", "configurations": [ { "name": "llvm-lit current file", "type": "python", "request": "launch", "program": "/opt/notnfs/kkleine/llvm-project/build/bin/llvm-lit", "args": ["${fileBasename}"], "cwd": "${fileDirname}", } { "name": "llvm-lit all tests in current dir", "type": "python", "request": "launch", "program": "/opt/notnfs/kkleine/llvm-project/build/bin/llvm-lit", "args": ["."], "cwd": "${fileDirname}", } ] }&lt;/pre&gt; &lt;p&gt;You just need to adjust the path to point to your &lt;code&gt;llvm-lit&lt;/code&gt; binary.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the file hasn&amp;#8217;t been built yet, try building the &lt;code&gt;all&lt;/code&gt; target or the &lt;code&gt;check-llvm-tools-llvm-lit&lt;/code&gt; target.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s open a specific lit file by pressing &lt;strong&gt;Ctrl+P&lt;/strong&gt;. This opens a fuzzy dialog. Type &lt;code&gt;ast-dump-decl.c&lt;/code&gt; and observe where the file is found (shown in Figure 13).&lt;/p&gt; &lt;div id="attachment_803197" style="width: 607px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32.png"&gt;&lt;img aria-describedby="caption-attachment-803197" class="wp-image-803197 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32.png" alt="VS Code displays all the file names that match or resemble the 'ast-dump-decl.c' string." width="597" height="270" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32.png 597w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32-300x136.png 300w" sizes="(max-width: 597px) 100vw, 597px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-803197" class="wp-caption-text"&gt;Figure 13: Find files that match or are similar to the &lt;code&gt;ast-dump-decl.c&lt;/code&gt; string.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the file is opened, click on the debug symbol in the left-side bar toÂ open a debugging pane. At this point we&amp;#8217;re not interested in debugging in the classic sense; we just want to launch &lt;code&gt;llvm-lit&lt;/code&gt;. Click the small Play button (the triangle icon)Â next to your launch target name at the top of the screen. In this case, the launch target is &lt;strong&gt;llvm-lit current file&lt;/strong&gt;. A terminal will open and show results like the following:&lt;/p&gt; &lt;pre&gt;$ cd /opt/notnfs/kkleine/llvm-project/clang/test/AST ; env /usr/bin/python /home/kkleine/.vscode-server/extensions/ms-python.python-2020.6.91350/pythonFiles/lib/python/debugpy/launcher 44349 -- /opt/notnfs/kkleine/llvm-project/build/bin/llvm-lit ast-dump-decl.c llvm-lit: /opt/notnfs/kkleine/llvm-project/build/bin/../../llvm/utils/lit/lit/llvm/config.py:347: note: using clang: /opt/notnfs/kkleine/llvm-project/build/bin/clang -- Testing: 1 tests, 1 workers -- PASS: Clang :: AST/ast-dump-decl.c (1 of 1) Testing Time: 1.90s Passed: 1&lt;/pre&gt; &lt;p&gt;Feel free to run all the tests within the same directory as the current test file by selecting the other launch target, which is called &lt;code&gt;llvm-lit all tests in current dir&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I hope you enjoyed reading this articleâhappy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#038;title=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" data-a2a-url="https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/" data-a2a-title="Remote LLVM development with Visual Studio Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/"&gt;Remote LLVM development with Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8EdnrkJqKsQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I used the Qt Creator IDE for most of my C++ work in the past. Then I joined Red Hat around mid-2016 and worked on a project with Go for three years. I quickly realized that I wanted something similar to Qt Creator. Iâm a regular Vim user, but use it only for plain-text editing [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/"&gt;Remote LLVM development with Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">434777</post-id><dc:creator>Konrad Kleine</dc:creator><dc:date>2021-04-22T07:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/</feedburner:origLink></entry><entry><title type="html">Quarkus 2.0.0.Alpha1 released - Vert.x 4, MicroProfile 4 and Continuous Testing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3_VlwT9KnWA/" /><author><name /></author><id>https://quarkus.io/blog/quarkus-2-0-0-alpha1-released/</id><updated>2021-04-22T00:00:00Z</updated><content type="html">It is with a bit of emotion that I announce today the release of Quarkus 2.0.0.Alpha1. As previously presented, Quarkus 2.0 is in the continuity of Quarkus 1.x and wonât require too many changes on your side. But we consider it a major release as major parts of our infrastructure...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3_VlwT9KnWA" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/quarkus-2-0-0-alpha1-released/</feedburner:origLink></entry><entry><title>Access your Developer Sandbox for Red Hat OpenShift from the command line</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/W2huw4RknqM/" /><category term="Containers" /><category term="Developer Tools" /><category term="Kubernetes" /><category term="Uncategorized" /><category term="OpenShift Developer Sandbox" /><category term="OpenShift Help" /><category term="OpenShift Tools" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=894557</id><updated>2021-04-21T07:00:18Z</updated><published>2021-04-21T07:00:18Z</published><content type="html">&lt;p&gt;Now that you have your own Red Hat OpenShift instance in our &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt; &amp;#8230;&lt;/p&gt; &lt;p&gt;What? You don&amp;#8217;t have your place in the free sandbox? Where you can experiment with &lt;a target="_blank" rel="nofollow" href="/topics/containers/"&gt;containers&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;? Then &lt;a target="_blank" rel="nofollow" href="/developer-sandbox"&gt;hurry over to the website&lt;/a&gt; and sign up; I&amp;#8217;ll wait.&lt;/p&gt; &lt;p&gt;Okay, now that you have your own OpenShift instance in our Developer Sandbox for Red Hat OpenShift, you can log in to the dashboard and click around, take a tour, launch applicationsâall the cool stuff. But what if you want to run from the command line? The command line is where automation (it&amp;#8217;s scripting, but &amp;#8220;automation&amp;#8221; sounds so much cooler) happens. Building a structure of repeatable actions is, after all, what we developers do.&lt;/p&gt; &lt;p&gt;How do you get access? This short article will show you. Let&amp;#8217;s get started.&lt;/p&gt; &lt;h2&gt;First stop: The OpenShift dashboard&lt;/h2&gt; &lt;p&gt;The first step is to log into your OpenShift dashboard. Once there, click on the little question mark in the upper right corner (see Figure 1). The menu that appears is the key to unlocking the command line. It also contains links to a world of great information; take advantage of it.&lt;/p&gt; &lt;div id="attachment_894567" style="width: 369px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark.png"&gt;&lt;img aria-describedby="caption-attachment-894567" class="wp-image-894567 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark.png" alt="The OpenShift dashboard menu, with the help icon highlighted." width="359" height="221" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark.png 359w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark-300x185.png 300w" sizes="(max-width: 359px) 100vw, 359px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894567" class="wp-caption-text"&gt;Figure 1: The OpenShift dashboard help icon.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In our case, we want to click the &lt;strong&gt;Command Line Tools&lt;/strong&gt; option, shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_894577" style="width: 192px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu.png"&gt;&lt;img aria-describedby="caption-attachment-894577" class="wp-image-894577 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu.png" alt="The OpenShift Help options menu, with the Command Line Tools option highlighted." width="182" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu.png 182w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu-157x300.png 157w" sizes="(max-width: 182px) 100vw, 182px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894577" class="wp-caption-text"&gt;Figure 2: The OpenShift Help options menu.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The &lt;strong&gt;Command Line Tools&lt;/strong&gt; section of your dashboard is loaded with great tools, and you&amp;#8217;ll want to install some of them (&lt;code&gt;oc&lt;/code&gt; and &lt;code&gt;odo&lt;/code&gt; are must-haves, in my opinion). But right now we will focus on the very first link labeled &lt;strong&gt;Copy Login Command &lt;/strong&gt;(see Figure 3).&lt;/p&gt; &lt;div id="attachment_894587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page.png"&gt;&lt;img aria-describedby="caption-attachment-894587" class="wp-image-894587" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page.png" alt="The OpenShift command line tools page, with &amp;#34;Copy Login Command&amp;#34; highlighted." width="640" height="514" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page.png 953w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page-300x241.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page-768x616.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894587" class="wp-caption-text"&gt;Figure 3: The OpenShift command-line tools page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This link opens a new tab in your browser. When prompted to log in, simply click the &lt;strong&gt;DevSandbox&lt;/strong&gt; option. You&amp;#8217;ll land at what appears to be a rather unfinished web page. It&amp;#8217;s not unfinished; it&amp;#8217;s merely kept as simple as possible. You have one option, &lt;strong&gt;Display Token&lt;/strong&gt;, so click on it.&lt;/p&gt; &lt;h2&gt;A token of appreciation&lt;/h2&gt; &lt;p&gt;After you&amp;#8217;ve clicked &lt;strong&gt;Display Token&lt;/strong&gt;, your login token will appear, as well as the command you will need to log in (see Figure 4).&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You&amp;#8217;ll need to have the &lt;code&gt;oc&lt;/code&gt; command-line tool installed on your machine. Remember all the goodies I mentioned back on the &lt;strong&gt;Command Line Tools&lt;/strong&gt; page?&lt;/p&gt; &lt;div id="attachment_894627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token.png"&gt;&lt;img aria-describedby="caption-attachment-894627" class="wp-image-894627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-1024x207.png" alt="A sample API and login token displayed on the login command page." width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-1024x207.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-300x61.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-768x155.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token.png 1084w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894627" class="wp-caption-text"&gt;Figure 4: The API token and login command page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Copy the token to your clipboard and paste it to your command line. You can now access your sandbox from the command line (see Figure 5).&lt;/p&gt; &lt;div id="attachment_894637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in.png"&gt;&lt;img aria-describedby="caption-attachment-894637" class="wp-image-894637" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in.png" alt="The user logging into the project via the command-line interface." width="640" height="159" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in.png 986w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in-300x75.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in-768x191.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894637" class="wp-caption-text"&gt;Figure 5: Logging in from the command line.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Off and running&lt;/h2&gt; &lt;p&gt;Want to get an idea of what&amp;#8217;s at hand? Run the &lt;code&gt;oc new-app --list&lt;/code&gt; command and see what options are available to you. Just to whet your appetite, you can install:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An instance of MariaDB&lt;/li&gt; &lt;li&gt;.NET example code&lt;/li&gt; &lt;li&gt;An instance of MySQL&lt;/li&gt; &lt;li&gt;A Node.js example&lt;/li&gt; &lt;li&gt;Nginx&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;and dozens more.&lt;/p&gt; &lt;p&gt;Fun fact: You can also use the &lt;code&gt;kubectl&lt;/code&gt; command-line tool against your cluster.&lt;/p&gt; &lt;p&gt;Knock yourself out.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#038;title=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" data-a2a-url="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/" data-a2a-title="Access your Developer Sandbox for Red Hat OpenShift from the command line"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/"&gt;Access your Developer Sandbox for Red Hat OpenShift from the command line&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/W2huw4RknqM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Now that you have your own Red Hat OpenShift instance in our Developer Sandbox for Red Hat OpenShift &amp;#8230; What? You don&amp;#8217;t have your place in the free sandbox? Where you can experiment with containers and Kubernetes and Red Hat OpenShift? Then hurry over to the website and sign up; I&amp;#8217;ll wait. Okay, now that [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/"&gt;Access your Developer Sandbox for Red Hat OpenShift from the command line&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">894557</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2021-04-21T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/</feedburner:origLink></entry><entry><title type="html">Store health and safety - An architectural introduction</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7OYJJ5LGjbM/store-health-and-safety-architectural-introduction.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/EW4_zdCF3Zc/store-health-and-safety-architectural-introduction.html</id><updated>2021-04-21T05:00:00Z</updated><content type="html">Part 1 - An architectural introduction Welcome to a new series exploring a retail architecture blueprint. It's focusing on presenting access to ways of mapping successful implementations for specific use cases. It's an interesting challenge creating architectural content based on common customer adoption patterns. That's very different from most of the traditional marketing activities usually associated with generating content for the sole purpose of positioning products for solutions. When you're basing the content on actual execution in solution delivery, you're cutting out theÂ chuff.Â  What's that mean? It means that it's going to provide you with a way to implement a solution using open source technologies by focusing on the integrations, structures and interactions that actually have been proven to work. What's not included are any vendor promises that you'll find in normal marketing content. Those promised that when it gets down to implementation crunch time, might not fully deliver on their promises. Enter the termÂ Architectural Blueprint.Â  Let's look at these blueprints, how their created and what value they provide for your solution designs. THE PROCESS The first step is to decide the use case to start with, which in my case had to be linked to a higher level theme that becomes the leading focus. This higher level theme is not quite boiling the ocean, but it's so broad that it's going to require some division in to smaller parts. In this case we've aligned with the higher level theme beingÂ 'Retail'Â use cases, a vertical focus. This breaks down into the following use cases and in no particular order: * * * * * * Real-time stock control * Retail data framework The case we're tackling hereÂ is focused on Store Health and Safety.Â This use case we've defined as the following: Managing effective in-store compliance, health &amp;amp; safety, and employee checks and procedures. The approach taken is to research our existing customers that have implemented solutions in this space, collect their public facing content, research the internal implementation documentation collections from their successful engagements, and where necessary reach out to the field resources involved.Â  To get an idea of what these blueprints look like, we refer you to the series previously discussed here: * * * * Now on to the task at hand. WHAT'S NEXT The resulting content for this project targets the following three items. * A slide deck of the architectural blueprint for use telling the portfolio solution story. * Generic architectural diagrams providing the general details for the portfolio solution. * A write-up of the portfolio solution in a series that can be used for a customer solution brief. An overview of this series on store health and safety portfolio architecture blueprint: 1. 2. Common architectural elements 3. Example health and safety architecture Catch up on any past articles you missed by following any published links above. Next in this series, taking a look at theÂ genericÂ common architectural elementsÂ for the store health and safety architecture. (Article co-authored byÂ , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7OYJJ5LGjbM" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/EW4_zdCF3Zc/store-health-and-safety-architectural-introduction.html</feedburner:origLink></entry></feed>
